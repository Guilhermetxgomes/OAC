$date
	Sun Dec 01 17:19:25 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module EX_tb $end
$var wire 1 ! mem_write_out $end
$var wire 1 " reg_write_out $end
$var wire 5 # reg_rd_out [4:0] $end
$var wire 32 $ mux2_result_out [31:0] $end
$var wire 1 % mem_to_reg_out $end
$var wire 1 & mem_read_out $end
$var wire 1 ' flag_beq_out $end
$var wire 1 ( beq_instruction_out $end
$var wire 32 ) alu_result_out [31:0] $end
$var reg 2 * aluOp_in [1:0] $end
$var reg 1 + aluSrc_in $end
$var reg 32 , alu_data_mem_wb [31:0] $end
$var reg 32 - alu_ex_mem [31:0] $end
$var reg 1 . beq_instruction_in $end
$var reg 1 / clock $end
$var reg 5 0 ex_mem_reg_rd [4:0] $end
$var reg 1 1 ex_mem_reg_write $end
$var reg 3 2 funct3_in [2:0] $end
$var reg 7 3 funct7_in [6:0] $end
$var reg 32 4 immediate_in [31:0] $end
$var reg 1 5 mem_read_in $end
$var reg 1 6 mem_to_reg_in $end
$var reg 5 7 mem_wb_reg_rd [4:0] $end
$var reg 1 8 mem_wb_reg_write $end
$var reg 1 9 mem_write_in $end
$var reg 32 : reg_a_in [31:0] $end
$var reg 32 ; reg_b_in [31:0] $end
$var reg 5 < reg_rd_in [4:0] $end
$var reg 5 = reg_rs1_in [4:0] $end
$var reg 5 > reg_rs2_in [4:0] $end
$var reg 1 ? reg_write_in $end
$var reg 1 @ reset $end
$scope module uut $end
$var wire 2 A aluOp_in [1:0] $end
$var wire 1 + aluSrc_in $end
$var wire 32 B alu_data_mem_wb [31:0] $end
$var wire 32 C alu_ex_mem [31:0] $end
$var wire 1 . beq_instruction_in $end
$var wire 1 / clock $end
$var wire 5 D ex_mem_reg_rd [4:0] $end
$var wire 1 1 ex_mem_reg_write $end
$var wire 3 E funct3_in [2:0] $end
$var wire 7 F funct7_in [6:0] $end
$var wire 32 G immediate_in [31:0] $end
$var wire 1 5 mem_read_in $end
$var wire 1 6 mem_to_reg_in $end
$var wire 5 H mem_wb_reg_rd [4:0] $end
$var wire 1 8 mem_wb_reg_write $end
$var wire 1 9 mem_write_in $end
$var wire 1 ! mem_write_out $end
$var wire 32 I reg_a_in [31:0] $end
$var wire 32 J reg_b_in [31:0] $end
$var wire 5 K reg_rd_in [4:0] $end
$var wire 5 L reg_rs1_in [4:0] $end
$var wire 5 M reg_rs2_in [4:0] $end
$var wire 1 ? reg_write_in $end
$var wire 1 @ reset $end
$var wire 1 " reg_write_out $end
$var wire 5 N reg_rd_out [4:0] $end
$var wire 4 O op_alu [3:0] $end
$var wire 32 P mux3_out [31:0] $end
$var wire 32 Q mux2_result_out [31:0] $end
$var wire 32 R mux2_out [31:0] $end
$var wire 32 S mux1_out [31:0] $end
$var wire 1 % mem_to_reg_out $end
$var wire 1 & mem_read_out $end
$var wire 2 T forwardB [1:0] $end
$var wire 2 U forwardA [1:0] $end
$var wire 1 ' flag_beq_out $end
$var wire 1 V flag_beq $end
$var wire 1 ( beq_instruction_out $end
$var wire 32 W alu_result_out [31:0] $end
$var wire 32 X alu_result [31:0] $end
$scope module alu_control_ex $end
$var wire 2 Y aluOp [1:0] $end
$var wire 3 Z funct3 [2:0] $end
$var wire 7 [ funct7 [6:0] $end
$var reg 4 \ op [3:0] $end
$upscope $end
$scope module alu_ex $end
$var wire 4 ] op [3:0] $end
$var wire 32 ^ res [31:0] $end
$var wire 1 V flag $end
$var wire 32 _ b [31:0] $end
$var wire 32 ` a [31:0] $end
$upscope $end
$scope module ex_mem_reg $end
$var wire 32 a alu_result_in [31:0] $end
$var wire 32 b alu_result_out [31:0] $end
$var wire 1 . beq_instruction_in $end
$var wire 1 ( beq_instruction_out $end
$var wire 1 / clock $end
$var wire 1 V flag_beq_in $end
$var wire 1 ' flag_beq_out $end
$var wire 1 5 mem_read_in $end
$var wire 1 & mem_read_out $end
$var wire 1 6 mem_to_reg_in $end
$var wire 1 % mem_to_reg_out $end
$var wire 1 9 mem_write_in $end
$var wire 1 ! mem_write_out $end
$var wire 32 c mux2_result_out [31:0] $end
$var wire 5 d reg_rd_in [4:0] $end
$var wire 5 e reg_rd_out [4:0] $end
$var wire 1 ? reg_write_in $end
$var wire 1 " reg_write_out $end
$var wire 1 @ reset $end
$var wire 32 f mux2_result_in [31:0] $end
$var reg 32 g alu_result_value [31:0] $end
$var reg 1 h beq_instruction_value $end
$var reg 1 i flag_beq_value $end
$var reg 1 j mem_read_value $end
$var reg 1 k mem_to_reg_value $end
$var reg 32 l mux2_result_value [31:0] $end
$var reg 5 m reg_rd_value [4:0] $end
$var reg 1 n reg_write_value $end
$upscope $end
$scope module forward $end
$var wire 5 o ex_mem_reg_rd [4:0] $end
$var wire 1 1 ex_mem_reg_write $end
$var wire 5 p id_ex_reg_rs1 [4:0] $end
$var wire 5 q id_ex_reg_rs2 [4:0] $end
$var wire 5 r mem_wb_reg_rd [4:0] $end
$var wire 1 8 mem_wb_reg_write $end
$var wire 2 s forwardB [1:0] $end
$var wire 2 t forwardA [1:0] $end
$upscope $end
$scope module mux1 $end
$var wire 32 u D0 [31:0] $end
$var wire 32 v D1 [31:0] $end
$var wire 32 w D2 [31:0] $end
$var wire 2 x sel [1:0] $end
$var wire 32 y D_out [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 32 z D0 [31:0] $end
$var wire 32 { D1 [31:0] $end
$var wire 32 | D2 [31:0] $end
$var wire 2 } sel [1:0] $end
$var wire 32 ~ D_out [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 !" D0 [31:0] $end
$var wire 32 "" D1 [31:0] $end
$var wire 1 + sel $end
$var wire 32 #" D_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
0n
b0 m
b0 l
0k
0j
0i
0h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b10 ]
b10 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
1V
b0 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b10 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
1@
0?
b0 >
b0 =
b0 <
b0 ;
b0 :
09
08
b0 7
06
05
b0 4
b0 3
b0 2
01
b0 0
0/
0.
b0 -
b0 ,
0+
b0 *
b0 )
0(
0'
0&
0%
b0 $
b0 #
0"
z!
$end
#5000
1/
#10000
1'
1i
b11 $
b11 Q
b11 c
b11 l
0V
b11 P
b11 _
b11 #"
b1000 X
b1000 ^
b1000 a
b11 R
b11 f
b11 ~
b11 !"
b101 S
b101 `
b101 y
0/
b11 ;
b11 J
b11 z
b101 :
b101 I
b101 u
b10 *
b10 A
b10 Y
0@
#15000
1/
#20000
0'
0i
b1000 )
b1000 W
b1000 b
b1000 g
0/
#25000
1/
#30000
b10 X
b10 ^
b10 a
b110 O
b110 \
b110 ]
0/
b100000 3
b100000 F
b100000 [
#35000
1/
#40000
b10 )
b10 W
b10 b
b10 g
0/
#45000
1/
#50000
0V
b100000011000000100000000 $
b100000011000000100000000 Q
b100000011000000100000000 c
b100000011000000100000000 l
b1 O
b1 \
b1 ]
b10000001100000011000000110000001 X
b10000001100000011000000110000001 ^
b10000001100000011000000110000001 a
b100000011000000100000000 P
b100000011000000100000000 _
b100000011000000100000000 #"
b100000011000000100000000 R
b100000011000000100000000 f
b100000011000000100000000 ~
b100000011000000100000000 !"
b10000001000000000000000010000001 S
b10000001000000000000000010000001 `
b10000001000000000000000010000001 y
0/
b100000011000000100000000 ;
b100000011000000100000000 J
b100000011000000100000000 z
b10000001000000000000000010000001 :
b10000001000000000000000010000001 I
b10000001000000000000000010000001 u
b110 2
b110 E
b110 Z
b0 3
b0 F
b0 [
#55000
1/
#60000
b10000001100000011000000110000001 )
b10000001100000011000000110000001 W
b10000001100000011000000110000001 b
b10000001100000011000000110000001 g
0/
#65000
1/
#70000
b10000001000000000000000000000001 X
b10000001000000000000000000000001 ^
b10000001000000000000000000000001 a
b10000001100000011000000100000001 $
b10000001100000011000000100000001 Q
b10000001100000011000000100000001 c
b10000001100000011000000100000001 l
b0 O
b0 \
b0 ]
b10000001100000011000000100000001 P
b10000001100000011000000100000001 _
b10000001100000011000000100000001 #"
b10000001100000011000000100000001 R
b10000001100000011000000100000001 f
b10000001100000011000000100000001 ~
b10000001100000011000000100000001 !"
0/
b10000001100000011000000100000001 ;
b10000001100000011000000100000001 J
b10000001100000011000000100000001 z
b111 2
b111 E
b111 Z
#75000
1/
#80000
b10000001000000000000000000000001 )
b10000001000000000000000000000001 W
b10000001000000000000000000000001 b
b10000001000000000000000000000001 g
0/
#85000
1/
#90000
b1 $
b1 Q
b1 c
b1 l
b10 O
b10 \
b10 ]
0V
b1001 X
b1001 ^
b1001 a
b1 P
b1 _
b1 #"
b1 R
b1 f
b1 ~
b1 !"
b1000 S
b1000 `
b1000 y
0/
b1 ;
b1 J
b1 z
b1000 :
b1000 I
b1000 u
b0 *
b0 A
b0 Y
#95000
1/
#100000
b1001 )
b1001 W
b1001 b
b1001 g
0/
#105000
1/
#110000
1V
b10000000000000000000000000101 $
b10000000000000000000000000101 Q
b10000000000000000000000000101 c
b10000000000000000000000000101 l
b110 O
b110 \
b110 ]
b10000000000000000000000000101 P
b10000000000000000000000000101 _
b10000000000000000000000000101 #"
b0 X
b0 ^
b0 a
b10000000000000000000000000101 R
b10000000000000000000000000101 f
b10000000000000000000000000101 ~
b10000000000000000000000000101 !"
b10000000000000000000000000101 S
b10000000000000000000000000101 `
b10000000000000000000000000101 y
0/
b10000000000000000000000000101 ;
b10000000000000000000000000101 J
b10000000000000000000000000101 z
b10000000000000000000000000101 :
b10000000000000000000000000101 I
b10000000000000000000000000101 u
b1 *
b1 A
b1 Y
#115000
1/
#120000
1'
1i
b0 )
b0 W
b0 b
b0 g
0/
#125000
1/
#130000
b11 $
b11 Q
b11 c
b11 l
b10 O
b10 \
b10 ]
0V
b111 X
b111 ^
b111 a
b10 P
b10 _
b10 #"
b11 R
b11 f
b11 ~
b11 !"
b101 S
b101 `
b101 y
0/
1+
b10 4
b10 G
b10 ""
b11 ;
b11 J
b11 z
b101 :
b101 I
b101 u
b0 2
b0 E
b0 Z
b10 *
b10 A
b10 Y
#135000
1/
#140000
0'
0i
b111 )
b111 W
b111 b
b111 g
b1 S
b1 `
b1 y
b1001 R
b1001 f
b1001 ~
b1001 !"
b1 T
b1 s
b1 }
b1010 X
b1010 ^
b1010 a
b10 U
b10 t
b10 x
b1001 P
b1001 _
b1001 #"
0/
0+
b10 >
b10 M
b10 q
b1 =
b1 L
b1 p
b1 ,
b1 B
b1 w
b1 |
b1001 -
b1001 C
b1001 v
b1001 {
18
b10 7
b10 H
b10 r
11
b1 0
b1 D
b1 o
#145000
1/
#150000
b1001 $
b1001 Q
b1001 c
b1001 l
b1010 )
b1010 W
b1010 b
b1010 g
0/
#155000
1/
#160000
0/
