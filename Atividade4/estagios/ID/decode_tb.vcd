$date
	Sun Dec  1 17:49:56 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module decode_tb $end
$var wire 5 ! rs2_out [4:0] $end
$var wire 5 " rs1_out [4:0] $end
$var wire 1 # reg_write_out $end
$var wire 5 $ rd_out [4:0] $end
$var wire 1 % pc_enable $end
$var wire 32 & pc_branch_value [31:0] $end
$var wire 1 ' mem_write_out $end
$var wire 1 ( mem_to_reg_out $end
$var wire 1 ) mem_read_out $end
$var wire 32 * imediato_out [31:0] $end
$var wire 1 + if_id_enable $end
$var wire 1 , beq_instruction_out $end
$var wire 1 - aluSrc_out $end
$var wire 2 . aluOp_out [1:0] $end
$var reg 32 / Din [31:0] $end
$var reg 1 0 clock $end
$var reg 5 1 dest_ex_mem [4:0] $end
$var reg 5 2 dest_mem_wb [4:0] $end
$var reg 32 3 instruction [31:0] $end
$var reg 32 4 pc [31:0] $end
$var reg 5 5 reg_destino_exe [4:0] $end
$var reg 1 6 reset $end
$var reg 1 7 write_enable $end
$scope module uut $end
$var wire 32 8 Din [31:0] $end
$var wire 1 9 branch_taken_flag_interno $end
$var wire 1 0 clock $end
$var wire 5 : dest_ex_mem [4:0] $end
$var wire 5 ; dest_mem_wb [4:0] $end
$var wire 32 < instruction [31:0] $end
$var wire 32 = pc [31:0] $end
$var wire 5 > reg_destino_exe [4:0] $end
$var wire 1 6 reset $end
$var wire 1 7 write_enable $end
$var wire 1 ? stall_pipeline_interno $end
$var wire 5 @ rs2_out [4:0] $end
$var wire 5 A rs1_out [4:0] $end
$var wire 1 # reg_write_out $end
$var wire 1 B reg_write_interno $end
$var wire 5 C rd_out [4:0] $end
$var wire 5 D rd_interno [4:0] $end
$var wire 32 E rb_saida_intenrno [31:0] $end
$var wire 5 F rb_interno [4:0] $end
$var wire 32 G ra_saida_interno [31:0] $end
$var wire 5 H ra_interno [4:0] $end
$var wire 1 % pc_enable $end
$var wire 32 I pc_branch_value [31:0] $end
$var wire 1 ' mem_write_out $end
$var wire 1 J mem_write_interno $end
$var wire 1 ( mem_to_reg_out $end
$var wire 1 K mem_to_reg_interno $end
$var wire 1 ) mem_read_out $end
$var wire 1 L mem_read_interno $end
$var wire 32 M imediato_out [31:0] $end
$var wire 32 N imediato_interno [31:0] $end
$var wire 1 + if_id_enable $end
$var wire 1 , beq_instruction_out $end
$var wire 1 O beq_instruction_interno $end
$var wire 1 - aluSrc_out $end
$var wire 1 P aluSrc_interno $end
$var wire 2 Q aluOp_out [1:0] $end
$var wire 2 R aluOp_interno [1:0] $end
$var parameter 7 S ITYPE $end
$var parameter 7 T RTYPE $end
$var parameter 7 U SBTYPE $end
$var parameter 7 V STYPE $end
$scope module control $end
$var wire 1 0 clock $end
$var wire 7 W opcode [6:0] $end
$var wire 1 6 reset $end
$var reg 2 X aluOp_out [1:0] $end
$var reg 1 P aluSrc_out $end
$var reg 1 O beq_instruction_out $end
$var reg 1 L mem_read_out $end
$var reg 1 K mem_to_reg_out $end
$var reg 1 J mem_write_out $end
$var reg 1 B reg_write_out $end
$upscope $end
$scope module hazard_detection_unit $end
$var wire 1 9 branch_taken_flag $end
$var wire 1 0 clk $end
$var wire 5 Y dest_ex_mem [4:0] $end
$var wire 5 Z dest_mem_wb [4:0] $end
$var wire 1 [ has_data_hazard $end
$var wire 7 \ inst_opcode [6:0] $end
$var wire 1 6 rst $end
$var wire 5 ] src1 [4:0] $end
$var wire 5 ^ src2 [4:0] $end
$var parameter 7 _ TYPE_I $end
$var parameter 7 ` TYPE_R $end
$var parameter 7 a TYPE_S $end
$var parameter 7 b TYPE_SB $end
$var reg 1 + if_id_enable $end
$var reg 1 % pc_enable $end
$var reg 1 ? stall_pipeline $end
$upscope $end
$scope module id_ex_register $end
$var wire 2 c aluOp_in [1:0] $end
$var wire 1 d aluSrc_in $end
$var wire 1 e beq_instruction_in $end
$var wire 1 0 clk $end
$var wire 1 f mem_read_in $end
$var wire 1 g mem_to_reg_in $end
$var wire 1 h mem_write_in $end
$var wire 5 i rd_in [4:0] $end
$var wire 1 j reg_write_in $end
$var wire 1 6 reset $end
$var wire 5 k rs1_in [4:0] $end
$var wire 5 l rs2_in [4:0] $end
$var wire 32 m imediato_in [31:0] $end
$var reg 2 n aluOp_out [1:0] $end
$var reg 1 - aluSrc_out $end
$var reg 1 , beq_instruction_out $end
$var reg 32 o imediato_out [31:0] $end
$var reg 1 ) mem_read_out $end
$var reg 1 ( mem_to_reg_out $end
$var reg 1 ' mem_write_out $end
$var reg 5 p rd_out [4:0] $end
$var reg 1 # reg_write_out $end
$var reg 5 q rs1_out [4:0] $end
$var reg 5 r rs2_out [4:0] $end
$upscope $end
$scope module imm_gen $end
$var wire 32 s instruction [31:0] $end
$var wire 7 t opcode [6:0] $end
$var wire 32 u immediate [31:0] $end
$var wire 12 v imm_s [11:0] $end
$var wire 12 w imm_i [11:0] $end
$var wire 13 x imm_b [12:0] $end
$upscope $end
$scope module registradores $end
$var wire 1 0 clk $end
$var wire 32 y dado_escrita [31:0] $end
$var wire 32 z dado_fonte1 [31:0] $end
$var wire 32 { dado_fonte2 [31:0] $end
$var wire 5 | endereco_destino [4:0] $end
$var wire 5 } endereco_fonte1 [4:0] $end
$var wire 5 ~ endereco_fonte2 [4:0] $end
$var wire 1 7 habilita_escrita $end
$var wire 1 6 reset $end
$var wire 32 !" habilitacao_escrita [31:0] $end
$scope begin registradores[1] $end
$var parameter 2 "" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 #" dado_entrada [31:0] $end
$var wire 1 $" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 %" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[2] $end
$var parameter 3 &" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 '" dado_entrada [31:0] $end
$var wire 1 (" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 )" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[3] $end
$var parameter 3 *" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 +" dado_entrada [31:0] $end
$var wire 1 ," habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 -" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[4] $end
$var parameter 4 ." idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 /" dado_entrada [31:0] $end
$var wire 1 0" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 1" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[5] $end
$var parameter 4 2" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 3" dado_entrada [31:0] $end
$var wire 1 4" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 5" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[6] $end
$var parameter 4 6" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 7" dado_entrada [31:0] $end
$var wire 1 8" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 9" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[7] $end
$var parameter 4 :" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 ;" dado_entrada [31:0] $end
$var wire 1 <" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 =" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[8] $end
$var parameter 5 >" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 ?" dado_entrada [31:0] $end
$var wire 1 @" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 A" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[9] $end
$var parameter 5 B" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 C" dado_entrada [31:0] $end
$var wire 1 D" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 E" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[10] $end
$var parameter 5 F" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 G" dado_entrada [31:0] $end
$var wire 1 H" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 I" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[11] $end
$var parameter 5 J" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 K" dado_entrada [31:0] $end
$var wire 1 L" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 M" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[12] $end
$var parameter 5 N" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 O" dado_entrada [31:0] $end
$var wire 1 P" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 Q" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[13] $end
$var parameter 5 R" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 S" dado_entrada [31:0] $end
$var wire 1 T" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 U" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[14] $end
$var parameter 5 V" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 W" dado_entrada [31:0] $end
$var wire 1 X" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 Y" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[15] $end
$var parameter 5 Z" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 [" dado_entrada [31:0] $end
$var wire 1 \" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 ]" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[16] $end
$var parameter 6 ^" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 _" dado_entrada [31:0] $end
$var wire 1 `" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 a" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[17] $end
$var parameter 6 b" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 c" dado_entrada [31:0] $end
$var wire 1 d" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 e" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[18] $end
$var parameter 6 f" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 g" dado_entrada [31:0] $end
$var wire 1 h" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 i" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[19] $end
$var parameter 6 j" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 k" dado_entrada [31:0] $end
$var wire 1 l" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 m" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[20] $end
$var parameter 6 n" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 o" dado_entrada [31:0] $end
$var wire 1 p" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 q" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[21] $end
$var parameter 6 r" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 s" dado_entrada [31:0] $end
$var wire 1 t" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 u" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[22] $end
$var parameter 6 v" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 w" dado_entrada [31:0] $end
$var wire 1 x" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 y" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[23] $end
$var parameter 6 z" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 {" dado_entrada [31:0] $end
$var wire 1 |" habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 }" dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[24] $end
$var parameter 6 ~" idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 !# dado_entrada [31:0] $end
$var wire 1 "# habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 ## dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[25] $end
$var parameter 6 $# idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 %# dado_entrada [31:0] $end
$var wire 1 &# habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 '# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[26] $end
$var parameter 6 (# idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 )# dado_entrada [31:0] $end
$var wire 1 *# habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 +# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[27] $end
$var parameter 6 ,# idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 -# dado_entrada [31:0] $end
$var wire 1 .# habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 /# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[28] $end
$var parameter 6 0# idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 1# dado_entrada [31:0] $end
$var wire 1 2# habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 3# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[29] $end
$var parameter 6 4# idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 5# dado_entrada [31:0] $end
$var wire 1 6# habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 7# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[30] $end
$var parameter 6 8# idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 9# dado_entrada [31:0] $end
$var wire 1 :# habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 ;# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[31] $end
$var parameter 6 <# idx $end
$scope module registrador_instanciado $end
$var wire 1 0 clk $end
$var wire 32 =# dado_entrada [31:0] $end
$var wire 1 ># habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 ?# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope module x0 $end
$var wire 1 0 clk $end
$var wire 32 @# dado_entrada [31:0] $end
$var wire 1 A# habilita_escrita $end
$var wire 1 6 reset $end
$var reg 32 B# dado_saida [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11111 <#
b11110 8#
b11101 4#
b11100 0#
b11011 ,#
b11010 (#
b11001 $#
b11000 ~"
b10111 z"
b10110 v"
b10101 r"
b10100 n"
b10011 j"
b10010 f"
b10001 b"
b10000 ^"
b1111 Z"
b1110 V"
b1101 R"
b1100 N"
b1011 J"
b1010 F"
b1001 B"
b1000 >"
b111 :"
b110 6"
b101 2"
b100 ."
b11 *"
b10 &"
b1 ""
b1100011 b
b100011 a
b110011 `
b11 _
b100011 V
b1100011 U
b110011 T
b11 S
$end
#0
$dumpvars
b0 B#
0A#
b0 @#
b0 ?#
0>#
b0 =#
b0 ;#
0:#
b0 9#
b0 7#
06#
b0 5#
b0 3#
02#
b0 1#
b0 /#
0.#
b0 -#
b0 +#
0*#
b0 )#
b0 '#
0&#
b0 %#
b0 ##
0"#
b0 !#
b0 }"
0|"
b0 {"
b0 y"
0x"
b0 w"
b0 u"
0t"
b0 s"
b0 q"
0p"
b0 o"
b0 m"
0l"
b0 k"
b0 i"
0h"
b0 g"
b0 e"
0d"
b0 c"
b0 a"
0`"
b0 _"
b0 ]"
0\"
b0 ["
b0 Y"
0X"
b0 W"
b0 U"
0T"
b0 S"
b0 Q"
0P"
b0 O"
b0 M"
0L"
b0 K"
b0 I"
0H"
b0 G"
b0 E"
0D"
b0 C"
b0 A"
0@"
b0 ?"
b0 ="
0<"
b0 ;"
b0 9"
08"
b0 7"
b0 5"
04"
b0 3"
b0 1"
00"
b0 /"
b0 -"
0,"
b0 +"
b0 )"
0("
b0 '"
b0 %"
0$"
b0 #"
b1 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
0j
b0 i
0h
0g
0f
0e
0d
b0 c
b0 ^
b0 ]
b0 \
0[
b0 Z
b0 Y
b0 X
b0 W
b0 R
b0 Q
0P
0O
b0 N
b0 M
0L
0K
0J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
0B
b0 A
b0 @
0?
b0 >
b0 =
b0 <
b0 ;
b0 :
z9
b0 8
17
16
b0 5
b0 4
b0 3
b0 2
b0 1
00
b0 /
b0 .
0-
0,
0+
b0 *
0)
0(
0'
b0 &
0%
b0 $
0#
b0 "
b0 !
$end
#5
10
#10
1+
1%
00
06
#15
10
#20
b10011 \
b10011 W
b1 D
b1 i
b10011 t
b1 v
b100000000000 x
00
b10010011 3
b10010011 <
b10010011 s
#25
b1 $
b1 C
b1 p
10
#30
b1 &
b1 I
b1 N
b1 m
b1 u
b1 F
b1 ^
b1 l
b1 ~
b10 D
b10 i
b1 w
b10 v
b10 x
00
b100000000000100010011 3
b100000000000100010011 <
b100000000000100010011 s
#35
b1 *
b1 M
b1 o
b10 $
b10 C
b10 p
b1 !
b1 @
b1 r
10
#40
b0 *
b0 M
b0 o
b0 $
b0 C
b0 p
b0 !
b0 @
b0 r
0+
0%
00
16
#45
10
#50
b11111111111111111111110000000001 &
b11111111111111111111110000000001 I
b11111111111111111111110000000001 N
b11111111111111111111110000000001 m
b11111111111111111111110000000001 u
b0 D
b0 i
b110000000001 w
b110000000000 v
b1010000000000 x
00
b11000000000100000000000000010011 3
b11000000000100000000000000010011 <
b11000000000100000000000000010011 s
#55
10
#60
1+
1%
00
06
#65
b11111111111111111111110000000001 *
b11111111111111111111110000000001 M
b11111111111111111111110000000001 o
b1 !
b1 @
b1 r
10
#70
b0 &
b0 I
b0 N
b0 m
b0 u
b111 \
b111 W
b0 F
b0 ^
b0 l
b0 ~
b111 t
b0 w
b0 v
b0 x
00
b111 3
b111 <
b111 s
#75
b0 *
b0 M
b0 o
b0 !
b0 @
b0 r
10
#80
0+
0%
00
16
#85
10
#90
00
