$date
	Sat Nov 30 17:02:07 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module fetch_tb $end
$var wire 32 ! pc_out [31:0] $end
$var wire 32 " instrucao [31:0] $end
$var reg 1 # clock $end
$var reg 1 $ load_if_id_register $end
$var reg 1 % load_pc $end
$var reg 1 & mux_sel $end
$var reg 32 ' pc_branch_value [31:0] $end
$var reg 1 ( reset $end
$scope module uut $end
$var wire 1 # clock $end
$var wire 1 $ load_if_id_register $end
$var wire 1 % load_pc $end
$var wire 1 & mux_sel $end
$var wire 32 ) pc_branch_value [31:0] $end
$var wire 1 ( reset $end
$var wire 32 * pc_out_interno [31:0] $end
$var wire 32 + pc_out [31:0] $end
$var wire 32 , pc_in_interno [31:0] $end
$var wire 32 - instrucao_interno [31:0] $end
$var wire 32 . instrucao [31:0] $end
$scope module if_id_register $end
$var wire 1 # clock $end
$var wire 32 / instruction [31:0] $end
$var wire 1 $ load $end
$var wire 32 0 pc_out [31:0] $end
$var wire 1 ( reset $end
$var wire 32 1 pc_in [31:0] $end
$var wire 32 2 instruction_memory_in [31:0] $end
$var reg 32 3 im_value [31:0] $end
$var reg 32 4 pc_value [31:0] $end
$upscope $end
$scope module im $end
$var wire 32 5 addr [31:0] $end
$var reg 32 6 instr [31:0] $end
$upscope $end
$scope module mux_instruction_fetch $end
$var wire 32 7 D0 [31:0] $end
$var wire 32 8 D1 [31:0] $end
$var wire 1 & sel $end
$var wire 32 9 D_out [31:0] $end
$var parameter 32 : WIDTH $end
$upscope $end
$scope module pc $end
$var wire 1 # clock $end
$var wire 1 % load $end
$var wire 32 ; pc_in [31:0] $end
$var wire 1 ( reset $end
$var wire 32 < pc_out [31:0] $end
$var reg 32 = pc_value [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 :
$end
#0
$dumpvars
b0 =
b0 <
b100 ;
b100 9
b0 8
b100 7
b100001010000100000011 6
b0 5
b0 4
b0 3
b100001010000100000011 2
b100 1
b0 0
b0 /
b0 .
b100001010000100000011 -
b100 ,
b0 +
b0 *
b0 )
1(
b0 '
0&
0%
0$
0#
b0 "
b0 !
$end
#5
1#
#10
b1000 ,
b1000 1
b1000 9
b1000 ;
b1000010010000010100011 -
b1000010010000010100011 2
b1000010010000010100011 6
b100001010000100000011 "
b100001010000100000011 .
b100001010000100000011 /
b100001010000100000011 3
b100 !
b100 +
b100 0
b100 4
b1000 7
b100 *
b100 5
b100 <
b100 =
0#
1$
1%
0(
#15
1#
#20
b1000011000001000110011 -
b1000011000001000110011 2
b1000011000001000110011 6
b1100 7
b1000 *
b1000 5
b1000 <
b1000 =
b1000010010000010100011 "
b1000010010000010100011 .
b1000010010000010100011 /
b1000010010000010100011 3
b1000 !
b1000 +
b1000 0
b1000 4
b10000 ,
b10000 1
b10000 9
b10000 ;
0#
b10000 '
b10000 )
b10000 8
1&
#25
1#
#30
b1000011111001100110011 -
b1000011111001100110011 2
b1000011111001100110011 6
b1000011000001000110011 "
b1000011000001000110011 .
b1000011000001000110011 /
b1000011000001000110011 3
b10000 !
b10000 +
b10000 0
b10000 4
b10100 7
b10000 *
b10000 5
b10000 <
b10000 =
b10100 ,
b10100 1
b10100 9
b10100 ;
0#
0&
#35
1#
#40
b11000 ,
b11000 1
b11000 9
b11000 ;
b1000011110001110110011 -
b1000011110001110110011 2
b1000011110001110110011 6
b11000 7
b10100 *
b10100 5
b10100 <
b10100 =
b1000011111001100110011 "
b1000011111001100110011 .
b1000011111001100110011 /
b1000011111001100110011 3
b10100 !
b10100 +
b10100 0
b10100 4
0#
#45
1#
#50
b11100 ,
b11100 1
b11100 9
b11100 ;
b10100100000000011100011 -
b10100100000000011100011 2
b10100100000000011100011 6
b1000011110001110110011 "
b1000011110001110110011 .
b1000011110001110110011 /
b1000011110001110110011 3
b11000 !
b11000 +
b11000 0
b11000 4
b11100 7
b11000 *
b11000 5
b11000 <
b11000 =
0#
