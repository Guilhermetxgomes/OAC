$date
	Mon Dec 02 20:56:06 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module riscv_pipeline_tb $end
$var reg 1 ! clock $end
$var reg 1 " ligar $end
$var reg 1 # reset $end
$scope module DUT $end
$var wire 1 ! clock $end
$var wire 1 " ligar $end
$var wire 1 # reset $end
$var wire 1 $ s_mem_write_ex_mem $end
$var wire 1 % s_reg_write_mem_wb $end
$var wire 1 & s_reg_write_id_ex $end
$var wire 1 ' s_reg_write_ex_mem $end
$var wire 5 ( s_reg_rb_mem_wb [4:0] $end
$var wire 32 ) s_reg_b [31:0] $end
$var wire 32 * s_reg_a [31:0] $end
$var wire 32 + s_read_data_mem_wb [31:0] $end
$var wire 5 , s_rd_ex [4:0] $end
$var wire 32 - s_pc_value [31:0] $end
$var wire 32 . s_pc_branch_value_IF [31:0] $end
$var wire 32 / s_pc_branch_value [31:0] $end
$var wire 1 0 s_pcSrc $end
$var wire 1 1 s_mux_IF $end
$var wire 1 2 s_mem_write_id_ex $end
$var wire 1 3 s_mem_to_reg_mem_wb $end
$var wire 1 4 s_mem_to_reg_id_ex $end
$var wire 1 5 s_mem_to_reg_ex_mem $end
$var wire 1 6 s_mem_read_id_ex $end
$var wire 1 7 s_mem_read_ex_mem $end
$var wire 1 8 s_load_pc $end
$var wire 1 9 s_load_if_id_register $end
$var wire 32 : s_instruction [31:0] $end
$var wire 32 ; s_immediate [31:0] $end
$var wire 7 < s_funct7 [6:0] $end
$var wire 3 = s_funct3 [2:0] $end
$var wire 1 > s_beq_instruction_id_ex $end
$var wire 1 ? s_beq_instruction_ex_mem $end
$var wire 32 @ s_alu_result_mem_wb [31:0] $end
$var wire 32 A s_alu_data_mem_wb [31:0] $end
$var wire 1 B s_aluSrc $end
$var wire 2 C s_aluOp [1:0] $end
$var wire 5 D s_addr_rsd_id_ex [4:0] $end
$var wire 5 E s_addr_rs2 [4:0] $end
$var wire 5 F s_addr_rs1 [4:0] $end
$var wire 1 G s_IF_flush $end
$var wire 5 H reg_rd_ex_mem [4:0] $end
$var wire 32 I mux2_result_ex_mem [31:0] $end
$var wire 1 J forward_mem_wb_reg_write $end
$var wire 5 K forward_mem_wb_reg_rd [4:0] $end
$var wire 1 L forward_ex_mem_reg_write $end
$var wire 5 M forward_ex_mem_reg_rd [4:0] $end
$var wire 32 N forward_alu_ex_mem [31:0] $end
$var wire 1 O flag_beq_ex_mem $end
$var wire 32 P alu_result_ex_mem [31:0] $end
$scope module EX_stage $end
$var wire 1 ! clock $end
$var wire 1 $ mem_write_out $end
$var wire 5 Q rd_ex [4:0] $end
$var wire 1 # reset $end
$var wire 1 ' reg_write_out $end
$var wire 1 & reg_write_in $end
$var wire 5 R reg_rs2_in [4:0] $end
$var wire 5 S reg_rs1_in [4:0] $end
$var wire 5 T reg_rd_out [4:0] $end
$var wire 5 U reg_rd_in [4:0] $end
$var wire 32 V reg_b_in [31:0] $end
$var wire 32 W reg_a_in [31:0] $end
$var wire 4 X op_alu [3:0] $end
$var wire 32 Y mux3_out [31:0] $end
$var wire 32 Z mux2_result_out [31:0] $end
$var wire 32 [ mux2_out [31:0] $end
$var wire 32 \ mux1_out [31:0] $end
$var wire 1 2 mem_write_in $end
$var wire 1 J mem_wb_reg_write $end
$var wire 5 ] mem_wb_reg_rd [4:0] $end
$var wire 1 5 mem_to_reg_out $end
$var wire 1 4 mem_to_reg_in $end
$var wire 1 7 mem_read_out $end
$var wire 1 6 mem_read_in $end
$var wire 32 ^ immediate_in [31:0] $end
$var wire 7 _ funct7_in [6:0] $end
$var wire 3 ` funct3_in [2:0] $end
$var wire 2 a forwardB [1:0] $end
$var wire 2 b forwardA [1:0] $end
$var wire 1 O flag_beq_out $end
$var wire 1 c flag_beq $end
$var wire 1 L ex_mem_reg_write $end
$var wire 5 d ex_mem_reg_rd [4:0] $end
$var wire 1 ? beq_instruction_out $end
$var wire 1 > beq_instruction_in $end
$var wire 32 e alu_result_out [31:0] $end
$var wire 32 f alu_result [31:0] $end
$var wire 32 g alu_ex_mem [31:0] $end
$var wire 32 h alu_data_mem_wb [31:0] $end
$var wire 1 B aluSrc_in $end
$var wire 2 i aluOp_in [1:0] $end
$scope module alu_control_ex $end
$var wire 7 j funct7 [6:0] $end
$var wire 3 k funct3 [2:0] $end
$var wire 2 l aluOp [1:0] $end
$var reg 4 m op [3:0] $end
$upscope $end
$scope module alu_ex $end
$var wire 4 n op [3:0] $end
$var wire 32 o res [31:0] $end
$var wire 1 c flag $end
$var wire 32 p b [31:0] $end
$var wire 32 q a [31:0] $end
$upscope $end
$scope module ex_mem_reg $end
$var wire 32 r alu_result_in [31:0] $end
$var wire 1 ! clock $end
$var wire 1 c flag_beq_in $end
$var wire 1 5 mem_to_reg_out $end
$var wire 1 $ mem_write_out $end
$var wire 32 s mux2_result_out [31:0] $end
$var wire 1 # reset $end
$var wire 1 ' reg_write_out $end
$var wire 1 & reg_write_in $end
$var wire 5 t reg_rd_out [4:0] $end
$var wire 5 u reg_rd_in [4:0] $end
$var wire 32 v mux2_result_in [31:0] $end
$var wire 1 2 mem_write_in $end
$var wire 1 4 mem_to_reg_in $end
$var wire 1 7 mem_read_out $end
$var wire 1 6 mem_read_in $end
$var wire 1 O flag_beq_out $end
$var wire 1 ? beq_instruction_out $end
$var wire 1 > beq_instruction_in $end
$var wire 32 w alu_result_out [31:0] $end
$var reg 32 x alu_result_value [31:0] $end
$var reg 1 ? beq_instruction_value $end
$var reg 1 O flag_beq_value $end
$var reg 1 7 mem_read_value $end
$var reg 1 y mem_to_reg_value $end
$var reg 32 z mux2_result_value [31:0] $end
$var reg 5 { reg_rd_value [4:0] $end
$var reg 1 ' reg_write_value $end
$upscope $end
$scope module forward $end
$var wire 1 J mem_wb_reg_write $end
$var wire 5 | mem_wb_reg_rd [4:0] $end
$var wire 5 } id_ex_reg_rs2 [4:0] $end
$var wire 5 ~ id_ex_reg_rs1 [4:0] $end
$var wire 2 !" forwardB [1:0] $end
$var wire 2 "" forwardA [1:0] $end
$var wire 1 L ex_mem_reg_write $end
$var wire 5 #" ex_mem_reg_rd [4:0] $end
$upscope $end
$scope module mux1 $end
$var wire 2 $" sel [1:0] $end
$var wire 32 %" D_out [31:0] $end
$var wire 32 &" D2 [31:0] $end
$var wire 32 '" D1 [31:0] $end
$var wire 32 (" D0 [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 2 )" sel [1:0] $end
$var wire 32 *" D_out [31:0] $end
$var wire 32 +" D2 [31:0] $end
$var wire 32 ," D1 [31:0] $end
$var wire 32 -" D0 [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 ." D0 [31:0] $end
$var wire 1 B sel $end
$var wire 32 /" D_out [31:0] $end
$var wire 32 0" D1 [31:0] $end
$upscope $end
$upscope $end
$scope module ID_stage $end
$var wire 1 G IF_flush $end
$var wire 1 1" branch_taken_flag_interno $end
$var wire 1 ! clock $end
$var wire 5 2" dest_ex_mem [4:0] $end
$var wire 1 1 mux_sel_IF $end
$var wire 1 # reset $end
$var wire 1 3" stall_pipeline_debug $end
$var wire 1 J write_enable $end
$var wire 1 4" stall_pipeline_interno $end
$var wire 5 5" rs2_out [4:0] $end
$var wire 5 6" rs1_out [4:0] $end
$var wire 1 & reg_write_out $end
$var wire 1 7" reg_write_interno $end
$var wire 5 8" reg_destino_exe [4:0] $end
$var wire 32 9" reg_b_out [31:0] $end
$var wire 32 :" reg_a_out [31:0] $end
$var wire 5 ;" rd_out [4:0] $end
$var wire 5 <" rd_interno [4:0] $end
$var wire 32 =" rb_saida_interno [31:0] $end
$var wire 5 >" rb_interno [4:0] $end
$var wire 32 ?" ra_saida_interno [31:0] $end
$var wire 5 @" ra_interno [4:0] $end
$var wire 1 8 pc_enable $end
$var wire 32 A" pc_branch_value [31:0] $end
$var wire 32 B" pc [31:0] $end
$var wire 1 2 mem_write_out $end
$var wire 1 C" mem_write_interno $end
$var wire 1 4 mem_to_reg_out $end
$var wire 1 D" mem_to_reg_interno $end
$var wire 1 6 mem_read_out $end
$var wire 1 E" mem_read_interno $end
$var wire 32 F" instruction [31:0] $end
$var wire 32 G" imediato_out [31:0] $end
$var wire 32 H" imediato_interno [31:0] $end
$var wire 1 9 if_id_enable $end
$var wire 7 I" funct7_out [6:0] $end
$var wire 3 J" funct3_out [2:0] $end
$var wire 5 K" dest_mem_wb [4:0] $end
$var wire 1 > beq_instruction_out $end
$var wire 1 L" beq_instruction_interno $end
$var wire 1 B aluSrc_out $end
$var wire 1 M" aluSrc_interno $end
$var wire 2 N" aluOp_out [1:0] $end
$var wire 2 O" aluOp_interno [1:0] $end
$var wire 32 P" Din [31:0] $end
$scope module control $end
$var wire 1 ! clock $end
$var wire 7 Q" opcode [6:0] $end
$var wire 1 # reset $end
$var reg 2 R" aluOp_out [1:0] $end
$var reg 1 M" aluSrc_out $end
$var reg 1 L" beq_instruction_out $end
$var reg 1 E" mem_read_out $end
$var reg 1 D" mem_to_reg_out $end
$var reg 1 C" mem_write_out $end
$var reg 1 7" reg_write_out $end
$upscope $end
$scope module hazard_detection_unit $end
$var wire 1 1" branch_taken_flag $end
$var wire 1 ! clk $end
$var wire 5 S" dest_ex_mem [4:0] $end
$var wire 1 T" has_data_hazard $end
$var wire 7 U" inst_opcode [6:0] $end
$var wire 1 # rst $end
$var wire 5 V" src1 [4:0] $end
$var wire 5 W" src2 [4:0] $end
$var wire 5 X" dest_mem_wb [4:0] $end
$var reg 1 9 if_id_enable $end
$var reg 1 8 pc_enable $end
$var reg 1 4" stall_pipeline $end
$upscope $end
$scope module id_ex_register $end
$var wire 2 Y" aluOp_in [1:0] $end
$var wire 1 Z" aluSrc_in $end
$var wire 1 [" beq_instruction_in $end
$var wire 1 ! clk $end
$var wire 3 \" funct3_in [2:0] $end
$var wire 7 ]" funct7_in [6:0] $end
$var wire 1 ^" mem_read_in $end
$var wire 1 _" mem_to_reg_in $end
$var wire 1 `" mem_write_in $end
$var wire 5 a" rd_in [4:0] $end
$var wire 1 b" reg_write_in $end
$var wire 1 # reset $end
$var wire 5 c" rs1_in [4:0] $end
$var wire 5 d" rs2_in [4:0] $end
$var wire 32 e" reg_b_in [31:0] $end
$var wire 32 f" reg_a_in [31:0] $end
$var wire 32 g" imediato_in [31:0] $end
$var reg 2 h" aluOp_out [1:0] $end
$var reg 1 B aluSrc_out $end
$var reg 1 > beq_instruction_out $end
$var reg 3 i" funct3_out [2:0] $end
$var reg 7 j" funct7_out [6:0] $end
$var reg 32 k" imediato_out [31:0] $end
$var reg 1 6 mem_read_out $end
$var reg 1 4 mem_to_reg_out $end
$var reg 1 2 mem_write_out $end
$var reg 5 l" rd_out [4:0] $end
$var reg 32 m" reg_a_out [31:0] $end
$var reg 32 n" reg_b_out [31:0] $end
$var reg 1 & reg_write_out $end
$var reg 5 o" rs1_out [4:0] $end
$var reg 5 p" rs2_out [4:0] $end
$upscope $end
$scope module imm_gen $end
$var wire 7 q" opcode [6:0] $end
$var wire 32 r" instruction [31:0] $end
$var wire 32 s" immediate [31:0] $end
$var wire 12 t" imm_s [11:0] $end
$var wire 12 u" imm_i [11:0] $end
$var wire 13 v" imm_b [12:0] $end
$upscope $end
$scope module registradores $end
$var wire 1 ! clk $end
$var wire 32 w" dado_fonte1 [31:0] $end
$var wire 32 x" dado_fonte2 [31:0] $end
$var wire 5 y" endereco_fonte1 [4:0] $end
$var wire 5 z" endereco_fonte2 [4:0] $end
$var wire 1 # reset $end
$var wire 32 {" habilitacao_escrita [31:0] $end
$var wire 1 J habilita_escrita $end
$var wire 5 |" endereco_destino [4:0] $end
$var wire 32 }" dado_escrita [31:0] $end
$scope begin registradores[1] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 ~" habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 !# dado_entrada [31:0] $end
$var reg 32 "# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[2] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 ## habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 $# dado_entrada [31:0] $end
$var reg 32 %# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[3] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 &# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 '# dado_entrada [31:0] $end
$var reg 32 (# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[4] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 )# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 *# dado_entrada [31:0] $end
$var reg 32 +# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[5] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 ,# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 -# dado_entrada [31:0] $end
$var reg 32 .# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[6] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 /# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 0# dado_entrada [31:0] $end
$var reg 32 1# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[7] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 2# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 3# dado_entrada [31:0] $end
$var reg 32 4# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[8] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 5# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 6# dado_entrada [31:0] $end
$var reg 32 7# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[9] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 8# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 9# dado_entrada [31:0] $end
$var reg 32 :# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[10] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 ;# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 <# dado_entrada [31:0] $end
$var reg 32 =# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[11] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 ># habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 ?# dado_entrada [31:0] $end
$var reg 32 @# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[12] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 A# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 B# dado_entrada [31:0] $end
$var reg 32 C# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[13] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 D# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 E# dado_entrada [31:0] $end
$var reg 32 F# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[14] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 G# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 H# dado_entrada [31:0] $end
$var reg 32 I# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[15] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 J# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 K# dado_entrada [31:0] $end
$var reg 32 L# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[16] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 M# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 N# dado_entrada [31:0] $end
$var reg 32 O# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[17] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 P# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 Q# dado_entrada [31:0] $end
$var reg 32 R# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[18] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 S# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 T# dado_entrada [31:0] $end
$var reg 32 U# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[19] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 V# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 W# dado_entrada [31:0] $end
$var reg 32 X# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[20] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 Y# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 Z# dado_entrada [31:0] $end
$var reg 32 [# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[21] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 \# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 ]# dado_entrada [31:0] $end
$var reg 32 ^# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[22] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 _# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 `# dado_entrada [31:0] $end
$var reg 32 a# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[23] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 b# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 c# dado_entrada [31:0] $end
$var reg 32 d# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[24] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 e# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 f# dado_entrada [31:0] $end
$var reg 32 g# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[25] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 h# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 i# dado_entrada [31:0] $end
$var reg 32 j# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[26] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 k# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 l# dado_entrada [31:0] $end
$var reg 32 m# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[27] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 n# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 o# dado_entrada [31:0] $end
$var reg 32 p# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[28] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 q# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 r# dado_entrada [31:0] $end
$var reg 32 s# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[29] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 t# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 u# dado_entrada [31:0] $end
$var reg 32 v# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[30] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 w# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 x# dado_entrada [31:0] $end
$var reg 32 y# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[31] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 z# habilita_escrita $end
$var wire 1 # reset $end
$var wire 32 {# dado_entrada [31:0] $end
$var reg 32 |# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope module x0 $end
$var wire 1 ! clk $end
$var wire 32 }# dado_entrada [31:0] $end
$var wire 1 ~# habilita_escrita $end
$var wire 1 # reset $end
$var reg 32 !$ dado_saida [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module IF_stage $end
$var wire 1 ! clock $end
$var wire 1 G if_flush $end
$var wire 1 9 load_if_id_register $end
$var wire 1 8 load_pc $end
$var wire 1 1 mux_sel $end
$var wire 32 "$ pc_branch_value [31:0] $end
$var wire 1 # reset $end
$var wire 32 #$ pc_out_interno [31:0] $end
$var wire 32 $$ pc_out [31:0] $end
$var wire 32 %$ pc_in_interno [31:0] $end
$var wire 32 &$ instrucao_interno [31:0] $end
$var wire 32 '$ instrucao [31:0] $end
$scope module if_id_register $end
$var wire 1 ! clock $end
$var wire 1 G if_flush $end
$var wire 32 ($ instruction [31:0] $end
$var wire 1 9 load $end
$var wire 1 # reset $end
$var wire 32 )$ pc_out [31:0] $end
$var wire 32 *$ pc_in [31:0] $end
$var wire 32 +$ instruction_memory_in [31:0] $end
$var reg 32 ,$ im_value [31:0] $end
$var reg 32 -$ pc_value [31:0] $end
$upscope $end
$scope module im $end
$var wire 32 .$ addr [31:0] $end
$var reg 32 /$ instr [31:0] $end
$upscope $end
$scope module mux_instruction_fetch $end
$var wire 32 0$ D0 [31:0] $end
$var wire 32 1$ D1 [31:0] $end
$var wire 1 1 sel $end
$var wire 32 2$ D_out [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ! clock $end
$var wire 1 8 load $end
$var wire 32 3$ pc_in [31:0] $end
$var wire 1 # reset $end
$var wire 32 4$ pc_out [31:0] $end
$var reg 32 5$ pc_value [31:0] $end
$upscope $end
$upscope $end
$scope module MEM_stage $end
$var wire 32 6$ alu_ex_mem [31:0] $end
$var wire 32 7$ alu_result_in [31:0] $end
$var wire 1 ? beq_instruction_in $end
$var wire 1 ! clock $end
$var wire 5 8$ ex_mem_reg_rd [4:0] $end
$var wire 1 L ex_mem_reg_write $end
$var wire 1 O flag_beq_in $end
$var wire 1 7 mem_read_in $end
$var wire 1 5 mem_to_reg_in $end
$var wire 1 $ mem_write_in $end
$var wire 32 9$ mux2_result_in [31:0] $end
$var wire 5 :$ reg_rd_in [4:0] $end
$var wire 1 ' reg_write_in $end
$var wire 1 # reset $end
$var wire 1 % reg_write_out $end
$var wire 5 ;$ reg_rd_out [4:0] $end
$var wire 32 <$ read_data_out [31:0] $end
$var wire 1 0 pcSrc $end
$var wire 1 3 mem_to_reg_out $end
$var wire 32 =$ data_out [31:0] $end
$var wire 32 >$ alu_result_out [31:0] $end
$scope module mem_wb_reg $end
$var wire 32 ?$ alu_result_in [31:0] $end
$var wire 1 ! clock $end
$var wire 1 5 mem_to_reg_in $end
$var wire 5 @$ reg_rd_in [4:0] $end
$var wire 1 ' reg_write_in $end
$var wire 1 # reset $end
$var wire 1 % reg_write_out $end
$var wire 5 A$ reg_rd_out [4:0] $end
$var wire 32 B$ read_data_out [31:0] $end
$var wire 32 C$ read_data_in [31:0] $end
$var wire 1 3 mem_to_reg_out $end
$var wire 32 D$ alu_result_out [31:0] $end
$var reg 32 E$ alu_result_value [31:0] $end
$var reg 1 3 mem_to_reg_value $end
$var reg 32 F$ read_data_value [31:0] $end
$var reg 5 G$ reg_rd_value [4:0] $end
$var reg 32 H$ reg_write_value [31:0] $end
$upscope $end
$scope module memoria_dados $end
$var wire 32 I$ addr [31:0] $end
$var wire 1 ! clk $end
$var wire 32 J$ data_in [31:0] $end
$var wire 1 7 re $end
$var wire 1 $ we $end
$var wire 32 K$ data_out [31:0] $end
$var integer 32 L$ i [31:0] $end
$upscope $end
$upscope $end
$scope module WB_stage $end
$var wire 32 M$ alu_result_in [31:0] $end
$var wire 1 ! clock $end
$var wire 1 3 mem_to_reg_in $end
$var wire 32 N$ read_data_in [31:0] $end
$var wire 5 O$ reg_rd_in [4:0] $end
$var wire 5 P$ reg_rd_out [4:0] $end
$var wire 1 % reg_write_in $end
$var wire 1 J reg_write_out $end
$var wire 1 # reset $end
$var wire 32 Q$ alu_data_mem_wb [31:0] $end
$scope module mux_write_back $end
$var wire 32 R$ D0 [31:0] $end
$var wire 32 S$ D1 [31:0] $end
$var wire 1 3 sel $end
$var wire 32 T$ D_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx T$
bx S$
bx R$
bx Q$
bx P$
bx O$
bx N$
bx M$
b11111 L$
bx K$
bx J$
bx I$
bx H$
bx G$
bx F$
bx E$
bx D$
bx C$
bx B$
bx A$
bx @$
bx ?$
bx >$
bx =$
bx <$
bx ;$
bx :$
bx 9$
bx 8$
bx 7$
bx 6$
bx 5$
bx 4$
bx 3$
bx 2$
bx 1$
bx 0$
bx /$
bx .$
bx -$
bx ,$
bx +$
bx *$
bx )$
bx ($
bx '$
bx &$
bx %$
bx $$
bx #$
bx "$
bx !$
0~#
b0 }#
bx |#
bx {#
xz#
bx y#
bx x#
xw#
bx v#
bx u#
xt#
bx s#
bx r#
xq#
bx p#
bx o#
xn#
bx m#
bx l#
xk#
bx j#
bx i#
xh#
bx g#
bx f#
xe#
bx d#
bx c#
xb#
bx a#
bx `#
x_#
bx ^#
bx ]#
x\#
bx [#
bx Z#
xY#
bx X#
bx W#
xV#
bx U#
bx T#
xS#
bx R#
bx Q#
xP#
bx O#
bx N#
xM#
bx L#
bx K#
xJ#
bx I#
bx H#
xG#
bx F#
bx E#
xD#
bx C#
bx B#
xA#
bx @#
bx ?#
x>#
bx =#
bx <#
x;#
bx :#
bx 9#
x8#
bx 7#
bx 6#
x5#
bx 4#
bx 3#
x2#
bx 1#
bx 0#
x/#
bx .#
bx -#
x,#
bx +#
bx *#
x)#
bx (#
bx '#
x&#
bx %#
bx $#
x##
bx "#
bx !#
x~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx0 v"
bx u"
bx t"
bx s"
bx r"
bx q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
bx g"
bx f"
bx e"
bx d"
bx c"
0b"
bx a"
0`"
0_"
0^"
bx ]"
bx \"
0["
0Z"
b0 Y"
bx X"
bx W"
bx V"
bx U"
xT"
bx S"
b0 R"
bx Q"
bx P"
b0 O"
b0 N"
0M"
0L"
bx K"
b0 J"
b0 I"
bx H"
b0 G"
bx F"
0E"
0D"
0C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
b0 ;"
b0 :"
b0 9"
bx 8"
07"
b0 6"
b0 5"
04"
03"
bx 2"
x1"
b0 0"
bx /"
bx ."
b0 -"
bx ,"
bx +"
bx *"
bx )"
b0 ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
b0 ~
b0 }
bx |
bx {
bx z
xy
bx x
bx w
bx v
b0 u
bx t
bx s
bx r
bx q
bx p
bx o
b10 n
b10 m
b0 l
b0 k
b0 j
b0 i
bx h
bx g
bx f
bx e
bx d
xc
bx b
bx a
b0 `
b0 _
b0 ^
bx ]
bx \
bx [
bx Z
bx Y
b10 X
b0 W
b0 V
b0 U
bx T
b0 S
b0 R
b0 Q
bx P
xO
bx N
bx M
xL
bx K
xJ
bx I
bx H
xG
b0 F
b0 E
b0 D
b0 C
0B
bx A
bx @
x?
0>
b0 =
b0 <
b0 ;
bx :
09
08
x7
06
x5
04
x3
02
x1
x0
bx /
bx .
bx -
b0 ,
bx +
b0 *
b0 )
bx (
x'
0&
x%
z$
1#
0"
0!
$end
#10000
1c
b0 f
b0 o
b0 r
b100 %$
b100 *$
b100 2$
b100 3$
0T"
b0 Y
b0 p
b0 /"
b0 .
b0 "$
b0 1$
b0 [
b0 v
b0 *"
b0 ."
b0 \
b0 q
b0 %"
b0 /
b0 A"
b0 H"
b0 g"
b0 s"
01
0G
01"
b0 a
b0 !"
b0 )"
b0 b
b0 ""
b0 $"
00
0z#
0w#
0t#
0q#
0n#
0k#
0h#
0e#
0b#
0_#
0\#
0Y#
0V#
0S#
0P#
0M#
0J#
0G#
0D#
0A#
0>#
0;#
08#
05#
02#
0/#
0,#
0)#
0&#
0##
0~"
b1000011000001000110011 &$
b1000011000001000110011 +$
b1000011000001000110011 /$
b0 v"
b0 t"
b0 u"
b0 q"
b0 <"
b0 a"
b0 ="
b0 e"
b0 x"
b0 >"
b0 W"
b0 d"
b0 z"
b0 ?"
b0 f"
b0 w"
b0 @"
b0 V"
b0 c"
b0 y"
b0 \"
b0 ]"
b0 Q"
b0 U"
b0 =$
b0 C$
b0 K$
b0 {"
b0 A
b0 h
b0 &"
b0 +"
b0 P"
b0 }"
b0 !#
b0 $#
b0 '#
b0 *#
b0 -#
b0 0#
b0 3#
b0 6#
b0 9#
b0 <#
b0 ?#
b0 B#
b0 E#
b0 H#
b0 K#
b0 N#
b0 Q#
b0 T#
b0 W#
b0 Z#
b0 ]#
b0 `#
b0 c#
b0 f#
b0 i#
b0 l#
b0 o#
b0 r#
b0 u#
b0 x#
b0 {#
b0 Q$
b0 T$
0J
0%
b100 0$
b0 #$
b0 .$
b0 4$
b0 5$
b0 :
b0 F"
b0 r"
b0 '$
b0 ($
b0 ,$
b0 -
b0 B"
b0 $$
b0 )$
b0 -$
b0 "#
b0 %#
b0 (#
b0 +#
b0 .#
b0 1#
b0 4#
b0 7#
b0 :#
b0 =#
b0 @#
b0 C#
b0 F#
b0 I#
b0 L#
b0 O#
b0 R#
b0 U#
b0 X#
b0 [#
b0 ^#
b0 a#
b0 d#
b0 g#
b0 j#
b0 m#
b0 p#
b0 s#
b0 v#
b0 y#
b0 |#
b0 !$
0O
b0 M
b0 d
b0 #"
b0 8$
b0 H
b0 T
b0 t
b0 {
b0 2"
b0 S"
b0 :$
b0 @$
b0 I
b0 Z
b0 s
b0 9$
b0 J$
b0 z
b0 N
b0 g
b0 '"
b0 ,"
b0 6$
b0 P
b0 e
b0 w
b0 x
b0 7$
b0 ?$
b0 I$
0?
07
0L
0'
05
0y
b0 K
b0 ]
b0 |
b0 8"
b0 K"
b0 X"
b0 |"
b0 P$
b0 (
b0 ;$
b0 A$
b0 G$
b0 O$
b0 @
b0 >$
b0 D$
b0 E$
b0 M$
b0 R$
b0 +
b0 <$
b0 B$
b0 F$
b0 N$
b0 S$
b0 H$
03
1!
#20000
0!
#25000
19
18
0#
#30000
b100 v"
b100 t"
b10 u"
b110011 q"
b100 <"
b100 a"
b0x0x ="
b0x0x e"
b0x0x x"
b10 >"
b10 W"
b10 d"
b10 z"
b0x ?"
b0x f"
b0x w"
b11 @"
b11 V"
b11 c"
b11 y"
b110011 Q"
b110011 U"
b100 .
b100 "$
b100 1$
b1000 %$
b1000 *$
b1000 2$
b1000 3$
b10011 &$
b10011 +$
b10011 /$
1O
b1000011000001000110011 :
b1000011000001000110011 F"
b1000011000001000110011 r"
b1000011000001000110011 '$
b1000011000001000110011 ($
b1000011000001000110011 ,$
b100 /
b100 A"
b100 -
b100 B"
b100 $$
b100 )$
b100 -$
b1000 0$
b100 #$
b100 .$
b100 4$
b100 5$
1!
#40000
0!
#50000
b1100 %$
b1100 *$
b1100 2$
b1100 3$
b0 &$
b0 +$
b0 /$
b0 v"
b0 t"
b0 u"
b10011 q"
b0 <"
b0 a"
b0 ="
b0 e"
b0 x"
b0 >"
b0 W"
b0 d"
b0 z"
b0 ?"
b0 f"
b0 w"
b0 @"
b0 V"
b0 c"
b0 y"
b10011 Q"
b10011 U"
b1000 .
b1000 "$
b1000 1$
b10 Y"
1b"
b1100 0$
b1000 #$
b1000 .$
b1000 4$
b1000 5$
b10011 :
b10011 F"
b10011 r"
b10011 '$
b10011 ($
b10011 ,$
b1000 /
b1000 A"
b1000 -
b1000 B"
b1000 $$
b1000 )$
b1000 -$
b100 ,
b100 Q
b100 D
b100 U
b100 u
b100 ;"
b100 l"
b10 E
b10 R
b10 }
b10 5"
b10 p"
b11 F
b11 S
b11 ~
b11 6"
b11 o"
b10 O"
b10 R"
17"
1!
#60000
0!
#70000
b0 q"
b0 Q"
b0 U"
b1100 .
b1100 "$
b1100 1$
b10000 %$
b10000 *$
b10000 2$
b10000 3$
b0 Y"
0b"
b100 M
b100 d
b100 #"
b100 8$
b100 H
b100 T
b100 t
b100 {
b100 2"
b100 S"
b100 :$
b100 @$
b0 :
b0 F"
b0 r"
b0 '$
b0 ($
b0 ,$
b1100 /
b1100 A"
b1100 -
b1100 B"
b1100 $$
b1100 )$
b1100 -$
b10000 0$
b1100 #$
b1100 .$
b1100 4$
b1100 5$
b0 O"
b0 R"
07"
b0 ,
b0 Q
b0 D
b0 U
b0 u
b0 ;"
b0 l"
b0 E
b0 R
b0 }
b0 5"
b0 p"
b0 F
b0 S
b0 ~
b0 6"
b0 o"
b10 C
b10 i
b10 l
b10 N"
b10 h"
1&
1!
#75000
b0 .
b0 "$
b0 1$
1"
#80000
0!
#90000
b10100 %$
b10100 *$
b10100 2$
b10100 3$
b10100 0$
b10000 #$
b10000 .$
b10000 4$
b10000 5$
b10000 /
b10000 A"
b10000 -
b10000 B"
b10000 $$
b10000 )$
b10000 -$
b0 M
b0 d
b0 #"
b0 8$
b0 H
b0 T
b0 t
b0 {
b0 2"
b0 S"
b0 :$
b0 @$
1L
1'
b100 K
b100 ]
b100 |
b100 8"
b100 K"
b100 X"
b100 |"
b100 P$
b100 (
b100 ;$
b100 A$
b100 G$
b100 O$
b0 C
b0 i
b0 l
b0 N"
b0 h"
0&
1!
#95000
b10000 .
b10000 "$
b10000 1$
0"
#100000
0!
#110000
b1 {"
1J
1%
b10100 .
b10100 "$
b10100 1$
b11000 %$
b11000 *$
b11000 2$
b11000 3$
b0 K
b0 ]
b0 |
b0 8"
b0 K"
b0 X"
b0 |"
b0 P$
b0 (
b0 ;$
b0 A$
b0 G$
b0 O$
b1 H$
0L
0'
b10100 /
b10100 A"
b10100 -
b10100 B"
b10100 $$
b10100 )$
b10100 -$
b11000 0$
b10100 #$
b10100 .$
b10100 4$
b10100 5$
1!
#120000
0!
#130000
b0 {"
b11100 %$
b11100 *$
b11100 2$
b11100 3$
b11000 .
b11000 "$
b11000 1$
0J
0%
b11100 0$
b11000 #$
b11000 .$
b11000 4$
b11000 5$
b11000 /
b11000 A"
b11000 -
b11000 B"
b11000 $$
b11000 )$
b11000 -$
b0 H$
1!
#140000
0!
#150000
b11100 .
b11100 "$
b11100 1$
b100000 %$
b100000 *$
b100000 2$
b100000 3$
b11100 /
b11100 A"
b11100 -
b11100 B"
b11100 $$
b11100 )$
b11100 -$
b100000 0$
b11100 #$
b11100 .$
b11100 4$
b11100 5$
1!
#155000
