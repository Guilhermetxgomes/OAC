$date
	Mon Dec 02 22:51:56 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module riscv_pipeline_tb $end
$var reg 1 ! clock $end
$var reg 1 " reset $end
$scope module DUT $end
$var wire 1 ! clock $end
$var wire 1 " reset $end
$var wire 1 # s_mem_write_ex_mem $end
$var wire 32 $ s_pc_branch_value_IF [31:0] $end
$var wire 1 % s_reg_write_mem_wb $end
$var wire 1 & s_reg_write_id_ex $end
$var wire 1 ' s_reg_write_ex_mem $end
$var wire 5 ( s_reg_rb_mem_wb [4:0] $end
$var wire 32 ) s_reg_b [31:0] $end
$var wire 32 * s_reg_a [31:0] $end
$var wire 32 + s_read_data_mem_wb [31:0] $end
$var wire 5 , s_rd_ex [4:0] $end
$var wire 32 - s_pc_value [31:0] $end
$var wire 32 . s_pc_branch_value [31:0] $end
$var wire 1 / s_pcSrc $end
$var wire 1 0 s_mux_IF $end
$var wire 1 1 s_mem_write_id_ex $end
$var wire 1 2 s_mem_to_reg_mem_wb $end
$var wire 1 3 s_mem_to_reg_id_ex $end
$var wire 1 4 s_mem_to_reg_ex_mem $end
$var wire 1 5 s_mem_read_id_ex $end
$var wire 1 6 s_mem_read_ex_mem $end
$var wire 1 7 s_load_pc $end
$var wire 1 8 s_load_if_id_register $end
$var wire 32 9 s_instruction [31:0] $end
$var wire 32 : s_immediate [31:0] $end
$var wire 7 ; s_funct7 [6:0] $end
$var wire 3 < s_funct3 [2:0] $end
$var wire 1 = s_beq_instruction_id_ex $end
$var wire 1 > s_beq_instruction_ex_mem $end
$var wire 32 ? s_alu_result_mem_wb [31:0] $end
$var wire 32 @ s_alu_data_mem_wb [31:0] $end
$var wire 1 A s_aluSrc $end
$var wire 2 B s_aluOp [1:0] $end
$var wire 5 C s_addr_rsd_id_ex [4:0] $end
$var wire 5 D s_addr_rs2 [4:0] $end
$var wire 5 E s_addr_rs1 [4:0] $end
$var wire 1 F s_IF_flush $end
$var wire 5 G reg_rd_ex_mem [4:0] $end
$var wire 32 H mux2_result_ex_mem [31:0] $end
$var wire 1 I forward_mem_wb_reg_write $end
$var wire 5 J forward_mem_wb_reg_rd [4:0] $end
$var wire 1 K forward_ex_mem_reg_write $end
$var wire 5 L forward_ex_mem_reg_rd [4:0] $end
$var wire 32 M forward_alu_ex_mem [31:0] $end
$var wire 1 N flag_beq_ex_mem $end
$var wire 32 O alu_result_ex_mem [31:0] $end
$scope module EX_stage $end
$var wire 1 ! clock $end
$var wire 1 # mem_write_out $end
$var wire 5 P rd_ex [4:0] $end
$var wire 1 " reset $end
$var wire 1 ' reg_write_out $end
$var wire 1 & reg_write_in $end
$var wire 5 Q reg_rs2_in [4:0] $end
$var wire 5 R reg_rs1_in [4:0] $end
$var wire 5 S reg_rd_out [4:0] $end
$var wire 5 T reg_rd_in [4:0] $end
$var wire 32 U reg_b_in [31:0] $end
$var wire 32 V reg_a_in [31:0] $end
$var wire 4 W op_alu [3:0] $end
$var wire 32 X mux3_out [31:0] $end
$var wire 32 Y mux2_result_out [31:0] $end
$var wire 32 Z mux2_out [31:0] $end
$var wire 32 [ mux1_out [31:0] $end
$var wire 1 1 mem_write_in $end
$var wire 1 I mem_wb_reg_write $end
$var wire 5 \ mem_wb_reg_rd [4:0] $end
$var wire 1 4 mem_to_reg_out $end
$var wire 1 3 mem_to_reg_in $end
$var wire 1 6 mem_read_out $end
$var wire 1 5 mem_read_in $end
$var wire 32 ] immediate_in [31:0] $end
$var wire 7 ^ funct7_in [6:0] $end
$var wire 3 _ funct3_in [2:0] $end
$var wire 2 ` forwardB [1:0] $end
$var wire 2 a forwardA [1:0] $end
$var wire 1 N flag_beq_out $end
$var wire 1 b flag_beq $end
$var wire 1 K ex_mem_reg_write $end
$var wire 5 c ex_mem_reg_rd [4:0] $end
$var wire 1 > beq_instruction_out $end
$var wire 1 = beq_instruction_in $end
$var wire 32 d alu_result_out [31:0] $end
$var wire 32 e alu_result [31:0] $end
$var wire 32 f alu_ex_mem [31:0] $end
$var wire 32 g alu_data_mem_wb [31:0] $end
$var wire 1 A aluSrc_in $end
$var wire 2 h aluOp_in [1:0] $end
$scope module alu_control_ex $end
$var wire 7 i funct7 [6:0] $end
$var wire 3 j funct3 [2:0] $end
$var wire 2 k aluOp [1:0] $end
$var reg 4 l op [3:0] $end
$upscope $end
$scope module alu_ex $end
$var wire 4 m op [3:0] $end
$var wire 32 n res [31:0] $end
$var wire 1 b flag $end
$var wire 32 o b [31:0] $end
$var wire 32 p a [31:0] $end
$upscope $end
$scope module ex_mem_reg $end
$var wire 32 q alu_result_in [31:0] $end
$var wire 1 ! clock $end
$var wire 1 b flag_beq_in $end
$var wire 1 4 mem_to_reg_out $end
$var wire 1 # mem_write_out $end
$var wire 32 r mux2_result_out [31:0] $end
$var wire 1 " reset $end
$var wire 1 ' reg_write_out $end
$var wire 1 & reg_write_in $end
$var wire 5 s reg_rd_out [4:0] $end
$var wire 5 t reg_rd_in [4:0] $end
$var wire 32 u mux2_result_in [31:0] $end
$var wire 1 1 mem_write_in $end
$var wire 1 3 mem_to_reg_in $end
$var wire 1 6 mem_read_out $end
$var wire 1 5 mem_read_in $end
$var wire 1 N flag_beq_out $end
$var wire 1 > beq_instruction_out $end
$var wire 1 = beq_instruction_in $end
$var wire 32 v alu_result_out [31:0] $end
$var reg 32 w alu_result_value [31:0] $end
$var reg 1 > beq_instruction_value $end
$var reg 1 N flag_beq_value $end
$var reg 1 6 mem_read_value $end
$var reg 1 x mem_to_reg_value $end
$var reg 32 y mux2_result_value [31:0] $end
$var reg 5 z reg_rd_value [4:0] $end
$var reg 1 ' reg_write_value $end
$upscope $end
$scope module forward $end
$var wire 1 I mem_wb_reg_write $end
$var wire 5 { mem_wb_reg_rd [4:0] $end
$var wire 5 | id_ex_reg_rs2 [4:0] $end
$var wire 5 } id_ex_reg_rs1 [4:0] $end
$var wire 2 ~ forwardB [1:0] $end
$var wire 2 !" forwardA [1:0] $end
$var wire 1 K ex_mem_reg_write $end
$var wire 5 "" ex_mem_reg_rd [4:0] $end
$upscope $end
$scope module mux1 $end
$var wire 2 #" sel [1:0] $end
$var wire 32 $" D_out [31:0] $end
$var wire 32 %" D2 [31:0] $end
$var wire 32 &" D1 [31:0] $end
$var wire 32 '" D0 [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 2 (" sel [1:0] $end
$var wire 32 )" D_out [31:0] $end
$var wire 32 *" D2 [31:0] $end
$var wire 32 +" D1 [31:0] $end
$var wire 32 ," D0 [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 -" D0 [31:0] $end
$var wire 1 A sel $end
$var wire 32 ." D_out [31:0] $end
$var wire 32 /" D1 [31:0] $end
$upscope $end
$upscope $end
$scope module ID_stage $end
$var wire 1 F IF_flush $end
$var wire 1 0" branch_taken_flag_interno $end
$var wire 1 ! clock $end
$var wire 5 1" dest_ex_mem [4:0] $end
$var wire 1 0 mux_sel_IF $end
$var wire 1 " reset $end
$var wire 1 2" stall_pipeline_debug $end
$var wire 1 I write_enable $end
$var wire 1 3" stall_pipeline_interno $end
$var wire 5 4" rs2_out [4:0] $end
$var wire 5 5" rs1_out [4:0] $end
$var wire 1 & reg_write_out $end
$var wire 1 6" reg_write_interno $end
$var wire 5 7" reg_destino_exe [4:0] $end
$var wire 32 8" reg_b_out [31:0] $end
$var wire 32 9" reg_a_out [31:0] $end
$var wire 5 :" rd_out [4:0] $end
$var wire 5 ;" rd_interno [4:0] $end
$var wire 32 <" rb_saida_interno [31:0] $end
$var wire 5 =" rb_interno [4:0] $end
$var wire 32 >" ra_saida_interno [31:0] $end
$var wire 5 ?" ra_interno [4:0] $end
$var wire 1 7 pc_enable $end
$var wire 32 @" pc_branch_value [31:0] $end
$var wire 32 A" pc [31:0] $end
$var wire 1 1 mem_write_out $end
$var wire 1 B" mem_write_interno $end
$var wire 1 3 mem_to_reg_out $end
$var wire 1 C" mem_to_reg_interno $end
$var wire 1 5 mem_read_out $end
$var wire 1 D" mem_read_interno $end
$var wire 32 E" instruction [31:0] $end
$var wire 32 F" imediato_out [31:0] $end
$var wire 32 G" imediato_interno [31:0] $end
$var wire 1 8 if_id_enable $end
$var wire 7 H" funct7_out [6:0] $end
$var wire 3 I" funct3_out [2:0] $end
$var wire 5 J" dest_mem_wb [4:0] $end
$var wire 1 = beq_instruction_out $end
$var wire 1 K" beq_instruction_interno $end
$var wire 1 A aluSrc_out $end
$var wire 1 L" aluSrc_interno $end
$var wire 2 M" aluOp_out [1:0] $end
$var wire 2 N" aluOp_interno [1:0] $end
$var wire 32 O" Din [31:0] $end
$scope module control $end
$var wire 1 ! clock $end
$var wire 7 P" opcode [6:0] $end
$var wire 1 " reset $end
$var reg 2 Q" aluOp_out [1:0] $end
$var reg 1 L" aluSrc_out $end
$var reg 1 K" beq_instruction_out $end
$var reg 1 D" mem_read_out $end
$var reg 1 C" mem_to_reg_out $end
$var reg 1 B" mem_write_out $end
$var reg 1 6" reg_write_out $end
$upscope $end
$scope module hazard_detection_unit $end
$var wire 1 0" branch_taken_flag $end
$var wire 1 ! clk $end
$var wire 5 R" dest_ex_mem [4:0] $end
$var wire 1 S" has_data_hazard $end
$var wire 7 T" inst_opcode [6:0] $end
$var wire 1 " rst $end
$var wire 5 U" src1 [4:0] $end
$var wire 5 V" src2 [4:0] $end
$var wire 5 W" dest_mem_wb [4:0] $end
$var reg 1 8 if_id_enable $end
$var reg 1 7 pc_enable $end
$var reg 1 3" stall_pipeline $end
$upscope $end
$scope module id_ex_register $end
$var wire 2 X" aluOp_in [1:0] $end
$var wire 1 Y" aluSrc_in $end
$var wire 1 Z" beq_instruction_in $end
$var wire 1 ! clk $end
$var wire 3 [" funct3_in [2:0] $end
$var wire 7 \" funct7_in [6:0] $end
$var wire 1 ]" mem_read_in $end
$var wire 1 ^" mem_to_reg_in $end
$var wire 1 _" mem_write_in $end
$var wire 5 `" rd_in [4:0] $end
$var wire 1 a" reg_write_in $end
$var wire 1 " reset $end
$var wire 5 b" rs1_in [4:0] $end
$var wire 5 c" rs2_in [4:0] $end
$var wire 32 d" reg_b_in [31:0] $end
$var wire 32 e" reg_a_in [31:0] $end
$var wire 32 f" imediato_in [31:0] $end
$var reg 2 g" aluOp_out [1:0] $end
$var reg 1 A aluSrc_out $end
$var reg 1 = beq_instruction_out $end
$var reg 3 h" funct3_out [2:0] $end
$var reg 7 i" funct7_out [6:0] $end
$var reg 32 j" imediato_out [31:0] $end
$var reg 1 5 mem_read_out $end
$var reg 1 3 mem_to_reg_out $end
$var reg 1 1 mem_write_out $end
$var reg 5 k" rd_out [4:0] $end
$var reg 32 l" reg_a_out [31:0] $end
$var reg 32 m" reg_b_out [31:0] $end
$var reg 1 & reg_write_out $end
$var reg 5 n" rs1_out [4:0] $end
$var reg 5 o" rs2_out [4:0] $end
$upscope $end
$scope module imm_gen $end
$var wire 7 p" opcode [6:0] $end
$var wire 32 q" instruction [31:0] $end
$var wire 32 r" immediate [31:0] $end
$var wire 12 s" imm_s [11:0] $end
$var wire 12 t" imm_i [11:0] $end
$var wire 13 u" imm_b [12:0] $end
$upscope $end
$scope module registradores $end
$var wire 1 ! clk $end
$var wire 32 v" dado_fonte1 [31:0] $end
$var wire 32 w" dado_fonte2 [31:0] $end
$var wire 5 x" endereco_fonte1 [4:0] $end
$var wire 5 y" endereco_fonte2 [4:0] $end
$var wire 1 " reset $end
$var wire 32 z" habilitacao_escrita [31:0] $end
$var wire 1 I habilita_escrita $end
$var wire 5 {" endereco_destino [4:0] $end
$var wire 32 |" dado_escrita [31:0] $end
$scope begin registradores[1] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 }" habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 ~" dado_entrada [31:0] $end
$var reg 32 !# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[2] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 "# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 ## dado_entrada [31:0] $end
$var reg 32 $# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[3] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 %# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 &# dado_entrada [31:0] $end
$var reg 32 '# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[4] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 (# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 )# dado_entrada [31:0] $end
$var reg 32 *# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[5] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 +# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 ,# dado_entrada [31:0] $end
$var reg 32 -# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[6] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 .# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 /# dado_entrada [31:0] $end
$var reg 32 0# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[7] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 1# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 2# dado_entrada [31:0] $end
$var reg 32 3# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[8] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 4# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 5# dado_entrada [31:0] $end
$var reg 32 6# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[9] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 7# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 8# dado_entrada [31:0] $end
$var reg 32 9# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[10] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 :# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 ;# dado_entrada [31:0] $end
$var reg 32 <# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[11] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 =# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 ># dado_entrada [31:0] $end
$var reg 32 ?# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[12] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 @# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 A# dado_entrada [31:0] $end
$var reg 32 B# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[13] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 C# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 D# dado_entrada [31:0] $end
$var reg 32 E# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[14] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 F# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 G# dado_entrada [31:0] $end
$var reg 32 H# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[15] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 I# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 J# dado_entrada [31:0] $end
$var reg 32 K# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[16] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 L# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 M# dado_entrada [31:0] $end
$var reg 32 N# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[17] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 O# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 P# dado_entrada [31:0] $end
$var reg 32 Q# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[18] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 R# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 S# dado_entrada [31:0] $end
$var reg 32 T# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[19] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 U# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 V# dado_entrada [31:0] $end
$var reg 32 W# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[20] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 X# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 Y# dado_entrada [31:0] $end
$var reg 32 Z# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[21] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 [# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 \# dado_entrada [31:0] $end
$var reg 32 ]# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[22] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 ^# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 _# dado_entrada [31:0] $end
$var reg 32 `# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[23] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 a# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 b# dado_entrada [31:0] $end
$var reg 32 c# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[24] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 d# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 e# dado_entrada [31:0] $end
$var reg 32 f# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[25] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 g# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 h# dado_entrada [31:0] $end
$var reg 32 i# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[26] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 j# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 k# dado_entrada [31:0] $end
$var reg 32 l# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[27] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 m# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 n# dado_entrada [31:0] $end
$var reg 32 o# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[28] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 p# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 q# dado_entrada [31:0] $end
$var reg 32 r# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[29] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 s# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 t# dado_entrada [31:0] $end
$var reg 32 u# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[30] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 v# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 w# dado_entrada [31:0] $end
$var reg 32 x# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope begin registradores[31] $end
$scope module registrador_instanciado $end
$var wire 1 ! clk $end
$var wire 1 y# habilita_escrita $end
$var wire 1 " reset $end
$var wire 32 z# dado_entrada [31:0] $end
$var reg 32 {# dado_saida [31:0] $end
$upscope $end
$upscope $end
$scope module x0 $end
$var wire 1 ! clk $end
$var wire 32 |# dado_entrada [31:0] $end
$var wire 1 }# habilita_escrita $end
$var wire 1 " reset $end
$var reg 32 ~# dado_saida [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module IF_stage $end
$var wire 1 ! clock $end
$var wire 1 F if_flush $end
$var wire 1 8 load_if_id_register $end
$var wire 1 7 load_pc $end
$var wire 1 0 mux_sel $end
$var wire 32 !$ pc_branch_value [31:0] $end
$var wire 1 " reset $end
$var wire 32 "$ pc_out_interno [31:0] $end
$var wire 32 #$ pc_out [31:0] $end
$var wire 32 $$ pc_in_interno [31:0] $end
$var wire 32 %$ instrucao_interno [31:0] $end
$var wire 32 &$ instrucao [31:0] $end
$scope module if_id_register $end
$var wire 1 ! clock $end
$var wire 1 F if_flush $end
$var wire 32 '$ instruction [31:0] $end
$var wire 1 8 load $end
$var wire 1 " reset $end
$var wire 32 ($ pc_out [31:0] $end
$var wire 32 )$ pc_in [31:0] $end
$var wire 32 *$ instruction_memory_in [31:0] $end
$var reg 32 +$ im_value [31:0] $end
$var reg 32 ,$ pc_value [31:0] $end
$upscope $end
$scope module im $end
$var wire 32 -$ addr [31:0] $end
$var reg 32 .$ instr [31:0] $end
$upscope $end
$scope module mux_instruction_fetch $end
$var wire 32 /$ D0 [31:0] $end
$var wire 32 0$ D1 [31:0] $end
$var wire 1 0 sel $end
$var wire 32 1$ D_out [31:0] $end
$upscope $end
$scope module pc $end
$var wire 1 ! clock $end
$var wire 1 7 load $end
$var wire 32 2$ pc_in [31:0] $end
$var wire 1 " reset $end
$var wire 32 3$ pc_out [31:0] $end
$var reg 32 4$ pc_value [31:0] $end
$upscope $end
$upscope $end
$scope module MEM_stage $end
$var wire 32 5$ alu_ex_mem [31:0] $end
$var wire 32 6$ alu_result_in [31:0] $end
$var wire 1 > beq_instruction_in $end
$var wire 1 ! clock $end
$var wire 5 7$ ex_mem_reg_rd [4:0] $end
$var wire 1 K ex_mem_reg_write $end
$var wire 1 N flag_beq_in $end
$var wire 1 6 mem_read_in $end
$var wire 1 4 mem_to_reg_in $end
$var wire 1 # mem_write_in $end
$var wire 32 8$ mux2_result_in [31:0] $end
$var wire 5 9$ reg_rd_in [4:0] $end
$var wire 1 ' reg_write_in $end
$var wire 1 " reset $end
$var wire 1 % reg_write_out $end
$var wire 5 :$ reg_rd_out [4:0] $end
$var wire 32 ;$ read_data_out [31:0] $end
$var wire 1 / pcSrc $end
$var wire 1 2 mem_to_reg_out $end
$var wire 32 <$ data_out [31:0] $end
$var wire 32 =$ alu_result_out [31:0] $end
$scope module mem_wb_reg $end
$var wire 32 >$ alu_result_in [31:0] $end
$var wire 1 ! clock $end
$var wire 1 4 mem_to_reg_in $end
$var wire 5 ?$ reg_rd_in [4:0] $end
$var wire 1 ' reg_write_in $end
$var wire 1 " reset $end
$var wire 1 % reg_write_out $end
$var wire 5 @$ reg_rd_out [4:0] $end
$var wire 32 A$ read_data_out [31:0] $end
$var wire 32 B$ read_data_in [31:0] $end
$var wire 1 2 mem_to_reg_out $end
$var wire 32 C$ alu_result_out [31:0] $end
$var reg 32 D$ alu_result_value [31:0] $end
$var reg 1 2 mem_to_reg_value $end
$var reg 32 E$ read_data_value [31:0] $end
$var reg 5 F$ reg_rd_value [4:0] $end
$var reg 32 G$ reg_write_value [31:0] $end
$upscope $end
$scope module memoria_dados $end
$var wire 32 H$ addr [31:0] $end
$var wire 1 ! clk $end
$var wire 32 I$ data_in [31:0] $end
$var wire 1 6 re $end
$var wire 1 # we $end
$var wire 32 J$ data_out [31:0] $end
$var integer 32 K$ i [31:0] $end
$upscope $end
$upscope $end
$scope module WB_stage $end
$var wire 32 L$ alu_result_in [31:0] $end
$var wire 1 ! clock $end
$var wire 1 2 mem_to_reg_in $end
$var wire 32 M$ read_data_in [31:0] $end
$var wire 5 N$ reg_rd_in [4:0] $end
$var wire 5 O$ reg_rd_out [4:0] $end
$var wire 1 % reg_write_in $end
$var wire 1 I reg_write_out $end
$var wire 1 " reset $end
$var wire 32 P$ alu_data_mem_wb [31:0] $end
$scope module mux_write_back $end
$var wire 32 Q$ D0 [31:0] $end
$var wire 32 R$ D1 [31:0] $end
$var wire 1 2 sel $end
$var wire 32 S$ D_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx S$
bx R$
bx Q$
bx P$
bx O$
bx N$
bx M$
bx L$
b11111 K$
bx J$
bx I$
bx H$
bx G$
bx F$
bx E$
bx D$
bx C$
bx B$
bx A$
bx @$
bx ?$
bx >$
bx =$
bx <$
bx ;$
bx :$
bx 9$
bx 8$
bx 7$
bx 6$
bx 5$
bx 4$
bx 3$
bx 2$
bx 1$
bz 0$
bx /$
bx .$
bx -$
bx ,$
bx +$
bx *$
bx )$
bx ($
bx '$
bx &$
bx %$
bx $$
bx #$
bx "$
bz !$
bx ~#
0}#
b0 |#
bx {#
bx z#
xy#
bx x#
bx w#
xv#
bx u#
bx t#
xs#
bx r#
bx q#
xp#
bx o#
bx n#
xm#
bx l#
bx k#
xj#
bx i#
bx h#
xg#
bx f#
bx e#
xd#
bx c#
bx b#
xa#
bx `#
bx _#
x^#
bx ]#
bx \#
x[#
bx Z#
bx Y#
xX#
bx W#
bx V#
xU#
bx T#
bx S#
xR#
bx Q#
bx P#
xO#
bx N#
bx M#
xL#
bx K#
bx J#
xI#
bx H#
bx G#
xF#
bx E#
bx D#
xC#
bx B#
bx A#
x@#
bx ?#
bx >#
x=#
bx <#
bx ;#
x:#
bx 9#
bx 8#
x7#
bx 6#
bx 5#
x4#
bx 3#
bx 2#
x1#
bx 0#
bx /#
x.#
bx -#
bx ,#
x+#
bx *#
bx )#
x(#
bx '#
bx &#
x%#
bx $#
bx ##
x"#
bx !#
bx ~"
x}"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx0 u"
bx t"
bx s"
bx r"
bx q"
bx p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
bx f"
bx e"
bx d"
bx c"
bx b"
0a"
bx `"
0_"
0^"
0]"
bx \"
bx ["
0Z"
0Y"
b0 X"
bx W"
bx V"
bx U"
bx T"
xS"
bx R"
b0 Q"
bx P"
bx O"
b0 N"
b0 M"
0L"
0K"
bx J"
b0 I"
b0 H"
bx G"
b0 F"
bx E"
0D"
0C"
0B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
b0 :"
b0 9"
b0 8"
bx 7"
06"
b0 5"
b0 4"
03"
02"
bx 1"
x0"
b0 /"
bx ."
bx -"
b0 ,"
bx +"
bx *"
bx )"
bx ("
b0 '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
b0 }
b0 |
bx {
bx z
bx y
xx
bx w
bx v
bx u
b0 t
bx s
bx r
bx q
bx p
bx o
bx n
b10 m
b10 l
b0 k
b0 j
b0 i
b0 h
bx g
bx f
bx e
bx d
bx c
xb
bx a
bx `
b0 _
b0 ^
b0 ]
bx \
bx [
bx Z
bx Y
bx X
b10 W
b0 V
b0 U
b0 T
bx S
b0 R
b0 Q
b0 P
bx O
xN
bx M
bx L
xK
bx J
xI
bx H
bx G
xF
b0 E
b0 D
b0 C
b0 B
0A
bx @
bx ?
x>
0=
b0 <
b0 ;
b0 :
bx 9
08
07
x6
05
x4
03
x2
01
x0
x/
bx .
bx -
b0 ,
bx +
b0 *
b0 )
bx (
x'
0&
x%
bz $
z#
1"
0!
$end
#10000
1b
b0 e
b0 n
b0 q
b100 $$
b100 )$
b100 1$
b100 2$
0S"
b0 X
b0 o
b0 ."
b0 Z
b0 u
b0 )"
b0 -"
b0 [
b0 p
b0 $"
b0 .
b0 @"
b0 G"
b0 f"
b0 r"
00
0F
00"
b0 `
b0 ~
b0 ("
b0 a
b0 !"
b0 #"
0/
0y#
0v#
0s#
0p#
0m#
0j#
0g#
0d#
0a#
0^#
0[#
0X#
0U#
0R#
0O#
0L#
0I#
0F#
0C#
0@#
0=#
0:#
07#
04#
01#
0.#
0+#
0(#
0%#
0"#
0}"
b1010010000010000011 %$
b1010010000010000011 *$
b1010010000010000011 .$
b0 u"
b0 s"
b0 t"
b0 p"
b0 ;"
b0 `"
b0 <"
b0 d"
b0 w"
b0 ="
b0 V"
b0 c"
b0 y"
b0 >"
b0 e"
b0 v"
b0 ?"
b0 U"
b0 b"
b0 x"
b0 ["
b0 \"
b0 P"
b0 T"
b0 <$
b0 B$
b0 J$
b0 z"
b0 @
b0 g
b0 %"
b0 *"
b0 O"
b0 |"
b0 ~"
b0 ##
b0 &#
b0 )#
b0 ,#
b0 /#
b0 2#
b0 5#
b0 8#
b0 ;#
b0 >#
b0 A#
b0 D#
b0 G#
b0 J#
b0 M#
b0 P#
b0 S#
b0 V#
b0 Y#
b0 \#
b0 _#
b0 b#
b0 e#
b0 h#
b0 k#
b0 n#
b0 q#
b0 t#
b0 w#
b0 z#
b0 P$
b0 S$
0I
0%
b100 /$
b0 "$
b0 -$
b0 3$
b0 4$
b0 9
b0 E"
b0 q"
b0 &$
b0 '$
b0 +$
b0 -
b0 A"
b0 #$
b0 ($
b0 ,$
b0 !#
b0 $#
b0 '#
b0 *#
b0 -#
b0 0#
b0 3#
b0 6#
b0 9#
b0 <#
b0 ?#
b0 B#
b0 E#
b0 H#
b0 K#
b0 N#
b0 Q#
b0 T#
b0 W#
b0 Z#
b0 ]#
b0 `#
b0 c#
b0 f#
b0 i#
b0 l#
b0 o#
b0 r#
b0 u#
b0 x#
b0 {#
b0 ~#
0N
b0 L
b0 c
b0 ""
b0 7$
b0 G
b0 S
b0 s
b0 z
b0 1"
b0 R"
b0 9$
b0 ?$
b0 H
b0 Y
b0 r
b0 8$
b0 I$
b0 y
b0 M
b0 f
b0 &"
b0 +"
b0 5$
b0 O
b0 d
b0 v
b0 w
b0 6$
b0 >$
b0 H$
0>
06
0K
0'
04
0x
b0 J
b0 \
b0 {
b0 7"
b0 J"
b0 W"
b0 {"
b0 O$
b0 (
b0 :$
b0 @$
b0 F$
b0 N$
b0 ?
b0 =$
b0 C$
b0 D$
b0 L$
b0 Q$
b0 +
b0 ;$
b0 A$
b0 E$
b0 M$
b0 R$
b0 G$
02
1!
#20000
0!
#25000
18
17
0"
#30000
b100000000000 u"
b1 s"
b11 p"
b1 ;"
b1 `"
b1010 ?"
b1010 U"
b1010 b"
b1010 x"
b10 ["
b11 P"
b11 T"
b1000 $$
b1000 )$
b1000 1$
b1000 2$
b10001010010000100000011 %$
b10001010010000100000011 *$
b10001010010000100000011 .$
1N
b1010010000010000011 9
b1010010000010000011 E"
b1010010000010000011 q"
b1010010000010000011 &$
b1010010000010000011 '$
b1010010000010000011 +$
b100 .
b100 @"
b100 -
b100 A"
b100 #$
b100 ($
b100 ,$
b1000 /$
b100 "$
b100 -$
b100 3$
b100 4$
1!
#40000
0!
#50000
b100 G"
b100 f"
b100 r"
b1100 $$
b1100 )$
b1100 1$
b1100 2$
b1000001000000110110011 %$
b1000001000000110110011 *$
b1000001000000110110011 .$
b10 u"
b10 s"
b100 t"
b10 ;"
b10 `"
b100 ="
b100 V"
b100 c"
b100 y"
1Y"
1]"
1a"
1^"
b1100 /$
b1000 "$
b1000 -$
b1000 3$
b1000 4$
b10001010010000100000011 9
b10001010010000100000011 E"
b10001010010000100000011 q"
b10001010010000100000011 &$
b10001010010000100000011 '$
b10001010010000100000011 +$
b1100 .
b1100 @"
b1000 -
b1000 A"
b1000 #$
b1000 ($
b1000 ,$
b1 ,
b1 P
b1 C
b1 T
b1 t
b1 :"
b1 k"
b1010 E
b1010 R
b1010 }
b1010 5"
b1010 n"
1L"
1D"
16"
1C"
1!
#60000
0!
#70000
0Y"
0]"
0a"
0^"
08
12"
13"
07
1S"
0b
b100 e
b100 n
b100 q
b0 G"
b0 f"
b0 r"
b100 X
b100 o
b100 ."
b100000000010 u"
b11 s"
b10 t"
b110011 p"
b11 ;"
b11 `"
b0x0x <"
b0x0x d"
b0x0x w"
b10 ="
b10 V"
b10 c"
b10 y"
b1 ?"
b1 U"
b1 b"
b1 x"
b0 ["
b110011 P"
b110011 T"
b10000 $$
b10000 )$
b10000 1$
b10000 2$
b1101010000010000100011 %$
b1101010000010000100011 *$
b1101010000010000100011 .$
b1 L
b1 c
b1 ""
b1 7$
b1 G
b1 S
b1 s
b1 z
b1 1"
b1 R"
b1 9$
b1 ?$
b1000001000000110110011 9
b1000001000000110110011 E"
b1000001000000110110011 q"
b1000001000000110110011 &$
b1000001000000110110011 '$
b1000001000000110110011 +$
b1100 .
b1100 @"
b1100 -
b1100 A"
b1100 #$
b1100 ($
b1100 ,$
b10000 /$
b1100 "$
b1100 -$
b1100 3$
b1100 4$
b100 :
b100 ]
b100 /"
b100 F"
b100 j"
b10 ,
b10 P
b10 C
b10 T
b10 t
b10 :"
b10 k"
b100 D
b100 Q
b100 |
b100 4"
b100 o"
1A
15
1&
13
1!
#80000
0!
#90000
1b
b10 `
b10 ~
b10 ("
b0 e
b0 n
b0 q
b1 <$
b1 B$
b1 J$
b0 X
b0 o
b0 ."
0N
b10 L
b10 c
b10 ""
b10 7$
b10 G
b10 S
b10 s
b10 z
b10 1"
b10 R"
b10 9$
b10 ?$
b100 M
b100 f
b100 &"
b100 +"
b100 5$
b100 O
b100 d
b100 v
b100 w
b100 6$
b100 >$
b100 H$
16
1K
1'
14
1x
b1 J
b1 \
b1 {
b1 7"
b1 J"
b1 W"
b1 {"
b1 O$
b1 (
b1 :$
b1 @$
b1 F$
b1 N$
b0 :
b0 ]
b0 /"
b0 F"
b0 j"
b11 ,
b11 P
b11 C
b11 T
b11 t
b11 :"
b11 k"
b10 D
b10 Q
b10 |
b10 4"
b10 o"
b1 E
b1 R
b1 }
b1 5"
b1 n"
0A
05
0&
03
b10 N"
b10 Q"
0L"
0D"
0C"
1!
#100000
0!
#110000
1"#
b100 z"
b1 `
b1 ~
b1 ("
b1 @
b1 g
b1 %"
b1 *"
b1 O"
b1 |"
b1 ~"
b1 ##
b1 &#
b1 )#
b1 ,#
b1 /#
b1 2#
b1 5#
b1 8#
b1 ;#
b1 >#
b1 A#
b1 D#
b1 G#
b1 J#
b1 M#
b1 P#
b1 S#
b1 V#
b1 Y#
b1 \#
b1 _#
b1 b#
b1 e#
b1 h#
b1 k#
b1 n#
b1 q#
b1 t#
b1 w#
b1 z#
b1 P$
b1 S$
1I
1%
b0 <$
b0 B$
b0 J$
b10 J
b10 \
b10 {
b10 7"
b10 J"
b10 W"
b10 {"
b10 O$
b10 (
b10 :$
b10 @$
b10 F$
b10 N$
b100 ?
b100 =$
b100 C$
b100 D$
b100 L$
b100 Q$
b1 +
b1 ;$
b1 A$
b1 E$
b1 M$
b1 R$
b1 G$
12
1N
b11 L
b11 c
b11 ""
b11 7$
b11 G
b11 S
b11 s
b11 z
b11 1"
b11 R"
b11 9$
b11 ?$
b0 M
b0 f
b0 &"
b0 +"
b0 5$
b0 O
b0 d
b0 v
b0 w
b0 6$
b0 >$
b0 H$
06
0K
0'
04
0x
1!
#120000
0!
#130000
b10 X"
1a"
02"
03"
18
17
0S"
b0 `
b0 ~
b0 ("
0"#
b0 z"
b0 @
b0 g
b0 %"
b0 *"
b0 O"
b0 |"
b0 ~"
b0 ##
b0 &#
b0 )#
b0 ,#
b0 /#
b0 2#
b0 5#
b0 8#
b0 ;#
b0 >#
b0 A#
b0 D#
b0 G#
b0 J#
b0 M#
b0 P#
b0 S#
b0 V#
b0 Y#
b0 \#
b0 _#
b0 b#
b0 e#
b0 h#
b0 k#
b0 n#
b0 q#
b0 t#
b0 w#
b0 z#
b0 P$
b0 S$
0I
0%
b0x01 <"
b0x01 d"
b0x01 w"
b1 $#
b11 J
b11 \
b11 {
b11 7"
b11 J"
b11 W"
b11 {"
b11 O$
b11 (
b11 :$
b11 @$
b11 F$
b11 N$
b0 ?
b0 =$
b0 C$
b0 D$
b0 L$
b0 Q$
b0 +
b0 ;$
b0 A$
b0 E$
b0 M$
b0 R$
b0 G$
02
1!
#140000
0!
#150000
b0 X"
0a"
08
12"
13"
07
1S"
b1000 G"
b1000 f"
b1000 r"
b1000 u"
b1000 s"
b11 t"
b100011 p"
b1000 ;"
b1000 `"
b0x <"
b0x d"
b0x w"
b11 ="
b11 V"
b11 c"
b11 y"
b1010 ?"
b1010 U"
b1010 b"
b1010 x"
b100011 P"
b100011 T"
b10100 $$
b10100 )$
b10100 1$
b10100 2$
b10011 %$
b10011 *$
b10011 .$
b1101010000010000100011 9
b1101010000010000100011 E"
b1101010000010000100011 q"
b1101010000010000100011 &$
b1101010000010000100011 '$
b1101010000010000100011 +$
b11000 .
b11000 @"
b10000 -
b10000 A"
b10000 #$
b10000 ($
b10000 ,$
b10100 /$
b10000 "$
b10000 -$
b10000 3$
b10000 4$
b10 B
b10 h
b10 k
b10 M"
b10 g"
1&
1!
#160000
0!
#170000
b10 `
b10 ~
b10 ("
1K
1'
b1000 :
b1000 ]
b1000 /"
b1000 F"
b1000 j"
b1000 ,
b1000 P
b1000 C
b1000 T
b1000 t
b1000 :"
b1000 k"
b11 D
b11 Q
b11 |
b11 4"
b11 o"
b1010 E
b1010 R
b1010 }
b1010 5"
b1010 n"
b0 B
b0 h
b0 k
b0 M"
b0 g"
0&
b0 N"
b0 Q"
1L"
1B"
06"
1!
#180000
0!
#190000
1%#
b1000 z"
b1 `
b1 ~
b1 ("
1I
1%
b1 G$
b1000 L
b1000 c
b1000 ""
b1000 7$
b1000 G
b1000 S
b1000 s
b1000 z
b1000 1"
b1000 R"
b1000 9$
b1000 ?$
0K
0'
1!
#200000
0!
#210000
1Y"
1_"
02"
03"
18
17
0S"
b0 `
b0 ~
b0 ("
0%#
b0 z"
0I
0%
b1000 J
b1000 \
b1000 {
b1000 7"
b1000 J"
b1000 W"
b1000 {"
b1000 O$
b1000 (
b1000 :$
b1000 @$
b1000 F$
b1000 N$
b0 G$
1!
#220000
0!
#230000
0b
b0 G"
b0 f"
b0 r"
b1000 e
b1000 n
b1000 q
b1000 X
b1000 o
b1000 ."
b0 u"
b0 s"
b0 t"
b10011 p"
b0 ;"
b0 `"
b0 <"
b0 d"
b0 w"
b0 ="
b0 V"
b0 c"
b0 y"
b0 ?"
b0 U"
b0 b"
b0 x"
b10011 P"
b10011 T"
b11000 $$
b11000 )$
b11000 1$
b11000 2$
b0 %$
b0 *$
b0 .$
b10011 9
b10011 E"
b10011 q"
b10011 &$
b10011 '$
b10011 +$
b10100 .
b10100 @"
b10100 -
b10100 A"
b10100 #$
b10100 ($
b10100 ,$
b11000 /$
b10100 "$
b10100 -$
b10100 3$
b10100 4$
1A
11
1!
#240000
0!
#250000
1b
b0 e
b0 n
b0 q
b11100 $$
b11100 )$
b11100 1$
b11100 2$
b0 p"
b0 P"
b0 T"
b0 X
b0 o
b0 ."
0Y"
0_"
b11100 /$
b11000 "$
b11000 -$
b11000 3$
b11000 4$
b0 9
b0 E"
b0 q"
b0 &$
b0 '$
b0 +$
b11000 .
b11000 @"
b11000 -
b11000 A"
b11000 #$
b11000 ($
b11000 ,$
0N
b1000 M
b1000 f
b1000 &"
b1000 +"
b1000 5$
b1000 O
b1000 d
b1000 v
b1000 w
b1000 6$
b1000 >$
b1000 H$
b0 :
b0 ]
b0 /"
b0 F"
b0 j"
b0 ,
b0 P
b0 C
b0 T
b0 t
b0 :"
b0 k"
b0 D
b0 Q
b0 |
b0 4"
b0 o"
b0 E
b0 R
b0 }
b0 5"
b0 n"
0L"
0B"
1!
#260000
0!
#270000
b1000 @
b1000 g
b1000 %"
b1000 *"
b1000 O"
b1000 |"
b1000 ~"
b1000 ##
b1000 &#
b1000 )#
b1000 ,#
b1000 /#
b1000 2#
b1000 5#
b1000 8#
b1000 ;#
b1000 >#
b1000 A#
b1000 D#
b1000 G#
b1000 J#
b1000 M#
b1000 P#
b1000 S#
b1000 V#
b1000 Y#
b1000 \#
b1000 _#
b1000 b#
b1000 e#
b1000 h#
b1000 k#
b1000 n#
b1000 q#
b1000 t#
b1000 w#
b1000 z#
b1000 P$
b1000 S$
b100000 $$
b100000 )$
b100000 1$
b100000 2$
b1000 ?
b1000 =$
b1000 C$
b1000 D$
b1000 L$
b1000 Q$
1N
b0 L
b0 c
b0 ""
b0 7$
b0 G
b0 S
b0 s
b0 z
b0 1"
b0 R"
b0 9$
b0 ?$
b0 M
b0 f
b0 &"
b0 +"
b0 5$
b0 O
b0 d
b0 v
b0 w
b0 6$
b0 >$
b0 H$
b11100 .
b11100 @"
b11100 -
b11100 A"
b11100 #$
b11100 ($
b11100 ,$
b100000 /$
b11100 "$
b11100 -$
b11100 3$
b11100 4$
0A
01
1!
#280000
0!
#290000
b100100 $$
b100100 )$
b100100 1$
b100100 2$
b0 @
b0 g
b0 %"
b0 *"
b0 O"
b0 |"
b0 ~"
b0 ##
b0 &#
b0 )#
b0 ,#
b0 /#
b0 2#
b0 5#
b0 8#
b0 ;#
b0 >#
b0 A#
b0 D#
b0 G#
b0 J#
b0 M#
b0 P#
b0 S#
b0 V#
b0 Y#
b0 \#
b0 _#
b0 b#
b0 e#
b0 h#
b0 k#
b0 n#
b0 q#
b0 t#
b0 w#
b0 z#
b0 P$
b0 S$
b100100 /$
b100000 "$
b100000 -$
b100000 3$
b100000 4$
b100000 .
b100000 @"
b100000 -
b100000 A"
b100000 #$
b100000 ($
b100000 ,$
b0 J
b0 \
b0 {
b0 7"
b0 J"
b0 W"
b0 {"
b0 O$
b0 (
b0 :$
b0 @$
b0 F$
b0 N$
b0 ?
b0 =$
b0 C$
b0 D$
b0 L$
b0 Q$
1!
#300000
0!
#310000
b101000 $$
b101000 )$
b101000 1$
b101000 2$
b100100 .
b100100 @"
b100100 -
b100100 A"
b100100 #$
b100100 ($
b100100 ,$
b101000 /$
b100100 "$
b100100 -$
b100100 3$
b100100 4$
1!
#320000
0!
#330000
b101100 $$
b101100 )$
b101100 1$
b101100 2$
b101100 /$
b101000 "$
b101000 -$
b101000 3$
b101000 4$
b101000 .
b101000 @"
b101000 -
b101000 A"
b101000 #$
b101000 ($
b101000 ,$
1!
#340000
0!
#350000
b110000 $$
b110000 )$
b110000 1$
b110000 2$
b101100 .
b101100 @"
b101100 -
b101100 A"
b101100 #$
b101100 ($
b101100 ,$
b110000 /$
b101100 "$
b101100 -$
b101100 3$
b101100 4$
1!
#360000
0!
#370000
b110100 $$
b110100 )$
b110100 1$
b110100 2$
b110100 /$
b110000 "$
b110000 -$
b110000 3$
b110000 4$
b110000 .
b110000 @"
b110000 -
b110000 A"
b110000 #$
b110000 ($
b110000 ,$
1!
#380000
0!
#390000
b111000 $$
b111000 )$
b111000 1$
b111000 2$
b110100 .
b110100 @"
b110100 -
b110100 A"
b110100 #$
b110100 ($
b110100 ,$
b111000 /$
b110100 "$
b110100 -$
b110100 3$
b110100 4$
1!
#400000
0!
#410000
b111100 $$
b111100 )$
b111100 1$
b111100 2$
b111100 /$
b111000 "$
b111000 -$
b111000 3$
b111000 4$
b111000 .
b111000 @"
b111000 -
b111000 A"
b111000 #$
b111000 ($
b111000 ,$
1!
#420000
0!
#430000
b1000000 $$
b1000000 )$
b1000000 1$
b1000000 2$
b111100 .
b111100 @"
b111100 -
b111100 A"
b111100 #$
b111100 ($
b111100 ,$
b1000000 /$
b111100 "$
b111100 -$
b111100 3$
b111100 4$
1!
#440000
0!
#450000
b1000100 $$
b1000100 )$
b1000100 1$
b1000100 2$
b1000100 /$
b1000000 "$
b1000000 -$
b1000000 3$
b1000000 4$
b1000000 .
b1000000 @"
b1000000 -
b1000000 A"
b1000000 #$
b1000000 ($
b1000000 ,$
1!
#460000
0!
#470000
b1001000 $$
b1001000 )$
b1001000 1$
b1001000 2$
b1000100 .
b1000100 @"
b1000100 -
b1000100 A"
b1000100 #$
b1000100 ($
b1000100 ,$
b1001000 /$
b1000100 "$
b1000100 -$
b1000100 3$
b1000100 4$
1!
#480000
0!
#490000
b1001100 $$
b1001100 )$
b1001100 1$
b1001100 2$
b1001100 /$
b1001000 "$
b1001000 -$
b1001000 3$
b1001000 4$
b1001000 .
b1001000 @"
b1001000 -
b1001000 A"
b1001000 #$
b1001000 ($
b1001000 ,$
1!
#500000
0!
#510000
b1010000 $$
b1010000 )$
b1010000 1$
b1010000 2$
b1001100 .
b1001100 @"
b1001100 -
b1001100 A"
b1001100 #$
b1001100 ($
b1001100 ,$
b1010000 /$
b1001100 "$
b1001100 -$
b1001100 3$
b1001100 4$
1!
#520000
0!
#530000
b1010100 $$
b1010100 )$
b1010100 1$
b1010100 2$
b1010100 /$
b1010000 "$
b1010000 -$
b1010000 3$
b1010000 4$
b1010000 .
b1010000 @"
b1010000 -
b1010000 A"
b1010000 #$
b1010000 ($
b1010000 ,$
1!
#540000
0!
#550000
b1011000 $$
b1011000 )$
b1011000 1$
b1011000 2$
b1010100 .
b1010100 @"
b1010100 -
b1010100 A"
b1010100 #$
b1010100 ($
b1010100 ,$
b1011000 /$
b1010100 "$
b1010100 -$
b1010100 3$
b1010100 4$
1!
#560000
0!
#570000
b1011100 $$
b1011100 )$
b1011100 1$
b1011100 2$
b1011100 /$
b1011000 "$
b1011000 -$
b1011000 3$
b1011000 4$
b1011000 .
b1011000 @"
b1011000 -
b1011000 A"
b1011000 #$
b1011000 ($
b1011000 ,$
1!
#575000
